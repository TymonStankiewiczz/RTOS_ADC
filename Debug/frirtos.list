
frirtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000728c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800745c  0800745c  0000845c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a4  080074a4  00009150  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074a4  080074a4  000084a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074ac  080074ac  00009150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ac  080074ac  000084ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074b0  080074b0  000084b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080074b4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  080074c4  00009010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08007564  000090b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004928  20000150  08007604  00009150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20004a78  08007604  00009a78  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d21a  00000000  00000000  00009180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004010  00000000  00000000  0002639a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001760  00000000  00000000  0002a3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001221  00000000  00000000  0002bb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000296a4  00000000  00000000  0002cd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d064  00000000  00000000  000563d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fd55b  00000000  00000000  00073439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00170994  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000629c  00000000  00000000  001709d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  00176c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007444 	.word	0x08007444

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	08007444 	.word	0x08007444

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	@ (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800055a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	2000016c 	.word	0x2000016c
 800056c:	200001c0 	.word	0x200001c0

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b08c      	sub	sp, #48	@ 0x30
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fe08 	bl	800118a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f845 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fa07 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 8000582:	f000 f9e7 	bl	8000954 <MX_DMA_Init>
  MX_ETH_Init();
 8000586:	f000 f8f9 	bl	800077c <MX_ETH_Init>
  MX_I2C1_Init();
 800058a:	f000 f945 	bl	8000818 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800058e:	f000 f983 	bl	8000898 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000592:	f000 f9b1 	bl	80008f8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000596:	f000 f89f 	bl	80006d8 <MX_ADC1_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of LED1Sem */
  osSemaphoreDef(LED1Sem);
 800059a:	2300      	movs	r3, #0
 800059c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800059e:	2300      	movs	r3, #0
 80005a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LED1SemHandle = osSemaphoreCreate(osSemaphore(LED1Sem), 1);
 80005a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005a6:	2101      	movs	r1, #1
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 f812 	bl	80055d2 <osSemaphoreCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a11      	ldr	r2, [pc, #68]	@ (80005f8 <main+0x88>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED2Sem */
  osSemaphoreDef(LED2Sem);
 80005b4:	2300      	movs	r3, #0
 80005b6:	623b      	str	r3, [r7, #32]
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	@ 0x24
  LED2SemHandle = osSemaphoreCreate(osSemaphore(LED2Sem), 1);
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	2101      	movs	r1, #1
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 f805 	bl	80055d2 <osSemaphoreCreate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a0c      	ldr	r2, [pc, #48]	@ (80005fc <main+0x8c>)
 80005cc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC */
  osThreadDef(ADC, ADC_Thread, osPriorityNormal, 0, 256);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <main+0x90>)
 80005d0:	1d3c      	adds	r4, r7, #4
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADCHandle = osThreadCreate(osThread(ADC), NULL);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 ff94 	bl	8005512 <osThreadCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <main+0x94>)
 80005ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f0:	f004 ff88 	bl	8005504 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <main+0x84>
 80005f8:	20000d10 	.word	0x20000d10
 80005fc:	20000d14 	.word	0x20000d14
 8000600:	08007460 	.word	0x08007460
 8000604:	20000d0c 	.word	0x20000d0c

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 feda 	bl	80073d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f002 ff16 	bl	800345c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <SystemClock_Config+0xc8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a26      	ldr	r2, [pc, #152]	@ (80006d0 <SystemClock_Config+0xc8>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000650:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800067c:	2348      	movs	r3, #72	@ 0x48
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000684:	2303      	movs	r3, #3
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fef5 	bl	800347c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 fa64 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 f983 	bl	80039c4 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c4:	f000 fa4e 	bl	8000b64 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	@ 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <MX_ADC1_Init+0x98>)
 80006ec:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <MX_ADC1_Init+0x9c>)
 80006ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <MX_ADC1_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000702:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000710:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000716:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000718:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <MX_ADC1_Init+0xa0>)
 800071a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000724:	2201      	movs	r2, #1
 8000726:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000732:	2201      	movs	r2, #1
 8000734:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000736:	480e      	ldr	r0, [pc, #56]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000738:	f000 fda8 	bl	800128c <HAL_ADC_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 fa0f 	bl	8000b64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000746:	2303      	movs	r3, #3
 8000748:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074a:	2301      	movs	r3, #1
 800074c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	@ (8000770 <MX_ADC1_Init+0x98>)
 8000758:	f001 f8a4 	bl	80018a4 <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000762:	f000 f9ff 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200005f8 	.word	0x200005f8
 8000774:	40012000 	.word	0x40012000
 8000778:	0f000001 	.word	0x0f000001

0800077c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000780:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_ETH_Init+0x84>)
 8000782:	4a20      	ldr	r2, [pc, #128]	@ (8000804 <MX_ETH_Init+0x88>)
 8000784:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <MX_ETH_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800078c:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <MX_ETH_Init+0x8c>)
 800078e:	2280      	movs	r2, #128	@ 0x80
 8000790:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <MX_ETH_Init+0x8c>)
 8000794:	22e1      	movs	r2, #225	@ 0xe1
 8000796:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_ETH_Init+0x8c>)
 800079a:	2200      	movs	r2, #0
 800079c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <MX_ETH_Init+0x8c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_ETH_Init+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_ETH_Init+0x84>)
 80007ac:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <MX_ETH_Init+0x8c>)
 80007ae:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_ETH_Init+0x84>)
 80007b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007b6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_ETH_Init+0x84>)
 80007ba:	4a14      	ldr	r2, [pc, #80]	@ (800080c <MX_ETH_Init+0x90>)
 80007bc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_ETH_Init+0x84>)
 80007c0:	4a13      	ldr	r2, [pc, #76]	@ (8000810 <MX_ETH_Init+0x94>)
 80007c2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_ETH_Init+0x84>)
 80007c6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007ca:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <MX_ETH_Init+0x84>)
 80007ce:	f001 fec3 	bl	8002558 <HAL_ETH_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007d8:	f000 f9c4 	bl	8000b64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007dc:	2238      	movs	r2, #56	@ 0x38
 80007de:	2100      	movs	r1, #0
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <MX_ETH_Init+0x98>)
 80007e2:	f006 fdf5 	bl	80073d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_ETH_Init+0x98>)
 80007e8:	2221      	movs	r2, #33	@ 0x21
 80007ea:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_ETH_Init+0x98>)
 80007ee:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007f2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <MX_ETH_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200006a0 	.word	0x200006a0
 8000804:	40028000 	.word	0x40028000
 8000808:	20000d20 	.word	0x20000d20
 800080c:	200000b0 	.word	0x200000b0
 8000810:	20000010 	.word	0x20000010
 8000814:	200005c0 	.word	0x200005c0

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <MX_I2C1_Init+0x74>)
 800081e:	4a1c      	ldr	r2, [pc, #112]	@ (8000890 <MX_I2C1_Init+0x78>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000822:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_I2C1_Init+0x74>)
 8000824:	4a1b      	ldr	r2, [pc, #108]	@ (8000894 <MX_I2C1_Init+0x7c>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_I2C1_Init+0x74>)
 8000830:	2201      	movs	r2, #1
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_I2C1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000852:	480e      	ldr	r0, [pc, #56]	@ (800088c <MX_I2C1_Init+0x74>)
 8000854:	f002 fb94 	bl	8002f80 <HAL_I2C_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800085e:	f000 f981 	bl	8000b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4809      	ldr	r0, [pc, #36]	@ (800088c <MX_I2C1_Init+0x74>)
 8000866:	f002 fc27 	bl	80030b8 <HAL_I2CEx_ConfigAnalogFilter>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000870:	f000 f978 	bl	8000b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000874:	2100      	movs	r1, #0
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_I2C1_Init+0x74>)
 8000878:	f002 fc69 	bl	800314e <HAL_I2CEx_ConfigDigitalFilter>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 f96f 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000750 	.word	0x20000750
 8000890:	40005400 	.word	0x40005400
 8000894:	00808cd2 	.word	0x00808cd2

08000898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	@ (80008f4 <MX_USART3_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008dc:	f003 fe88 	bl	80045f0 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008e6:	f000 f93d 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200007a4 	.word	0x200007a4
 80008f4:	40004800 	.word	0x40004800

080008f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000902:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2206      	movs	r2, #6
 8000908:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	2202      	movs	r2, #2
 800090e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2202      	movs	r2, #2
 800091a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2201      	movs	r2, #1
 8000920:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2201      	movs	r2, #1
 8000932:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	f002 fc53 	bl	80031e6 <HAL_PCD_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f90d 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000082c 	.word	0x2000082c

08000954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_DMA_Init+0x38>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a0b      	ldr	r2, [pc, #44]	@ (800098c <MX_DMA_Init+0x38>)
 8000960:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_DMA_Init+0x38>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2038      	movs	r0, #56	@ 0x38
 8000978:	f001 facd 	bl	8001f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800097c:	2038      	movs	r0, #56	@ 0x38
 800097e:	f001 fae6 	bl	8001f4e <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	@ 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b50      	ldr	r3, [pc, #320]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a4f      	ldr	r2, [pc, #316]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a49      	ldr	r2, [pc, #292]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b47      	ldr	r3, [pc, #284]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b44      	ldr	r3, [pc, #272]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a43      	ldr	r2, [pc, #268]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b41      	ldr	r3, [pc, #260]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b38      	ldr	r3, [pc, #224]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a37      	ldr	r2, [pc, #220]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b35      	ldr	r3, [pc, #212]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a31      	ldr	r2, [pc, #196]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae8 <MX_GPIO_Init+0x158>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedZew_GPIO_Port, LedZew_Pin, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2101      	movs	r1, #1
 8000a3a:	482c      	ldr	r0, [pc, #176]	@ (8000aec <MX_GPIO_Init+0x15c>)
 8000a3c:	f002 fa86 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a46:	482a      	ldr	r0, [pc, #168]	@ (8000af0 <MX_GPIO_Init+0x160>)
 8000a48:	f002 fa80 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2140      	movs	r1, #64	@ 0x40
 8000a50:	4828      	ldr	r0, [pc, #160]	@ (8000af4 <MX_GPIO_Init+0x164>)
 8000a52:	f002 fa7b 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481f      	ldr	r0, [pc, #124]	@ (8000aec <MX_GPIO_Init+0x15c>)
 8000a6e:	f002 f8c1 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LedZew_Pin */
  GPIO_InitStruct.Pin = LedZew_Pin;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LedZew_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4818      	ldr	r0, [pc, #96]	@ (8000aec <MX_GPIO_Init+0x15c>)
 8000a8a:	f002 f8b3 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a8e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4812      	ldr	r0, [pc, #72]	@ (8000af0 <MX_GPIO_Init+0x160>)
 8000aa8:	f002 f8a4 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aac:	2340      	movs	r3, #64	@ 0x40
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <MX_GPIO_Init+0x164>)
 8000ac4:	f002 f896 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ac8:	2380      	movs	r3, #128	@ 0x80
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	@ (8000af4 <MX_GPIO_Init+0x164>)
 8000adc:	f002 f88a 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3730      	adds	r7, #48	@ 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40021800 	.word	0x40021800

08000af8 <ADC_Thread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ADC_Thread */
void ADC_Thread(void const * argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {

        /* Photoresistor ADC read  */
        HAL_ADC_Start(&hadc1);
 8000b00:	4814      	ldr	r0, [pc, #80]	@ (8000b54 <ADC_Thread+0x5c>)
 8000b02:	f000 fc07 	bl	8001314 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 100);
 8000b06:	2164      	movs	r1, #100	@ 0x64
 8000b08:	4812      	ldr	r0, [pc, #72]	@ (8000b54 <ADC_Thread+0x5c>)
 8000b0a:	f000 fd05 	bl	8001518 <HAL_ADC_PollForConversion>
        AdcValue = HAL_ADC_GetValue(&hadc1);
 8000b0e:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <ADC_Thread+0x5c>)
 8000b10:	f000 fe9d 	bl	800184e <HAL_ADC_GetValue>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a10      	ldr	r2, [pc, #64]	@ (8000b58 <ADC_Thread+0x60>)
 8000b18:	6013      	str	r3, [r2, #0]
        HAL_ADC_Stop(&hadc1);
 8000b1a:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <ADC_Thread+0x5c>)
 8000b1c:	f000 fcc8 	bl	80014b0 <HAL_ADC_Stop>



        /*  If photoresistor ADC read is below 1000, turn on LED  */
        if(AdcValue < 1000) {
 8000b20:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <ADC_Thread+0x60>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b28:	d208      	bcs.n	8000b3c <ADC_Thread+0x44>
            HAL_GPIO_WritePin(LedZew_GPIO_Port, LedZew_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <ADC_Thread+0x64>)
 8000b30:	f002 fa0c 	bl	8002f4c <HAL_GPIO_WritePin>
            Stan=0;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <ADC_Thread+0x68>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	e007      	b.n	8000b4c <ADC_Thread+0x54>
        }
        else {
            HAL_GPIO_WritePin(LedZew_GPIO_Port, LedZew_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <ADC_Thread+0x64>)
 8000b42:	f002 fa03 	bl	8002f4c <HAL_GPIO_WritePin>
            Stan=1;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <ADC_Thread+0x68>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
        }

        /* Program Delay, current frequency - 10Hz  */
        osDelay(100);
 8000b4c:	2064      	movs	r0, #100	@ 0x64
 8000b4e:	f004 fd2c 	bl	80055aa <osDelay>
        HAL_ADC_Start(&hadc1);
 8000b52:	e7d5      	b.n	8000b00 <ADC_Thread+0x8>
 8000b54:	200005f8 	.word	0x200005f8
 8000b58:	20000d18 	.word	0x20000d18
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	20000d1c 	.word	0x20000d1c

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <Error_Handler+0x8>

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a10      	ldr	r2, [pc, #64]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	210f      	movs	r1, #15
 8000baa:	f06f 0001 	mvn.w	r0, #1
 8000bae:	f001 f9b2 	bl	8001f16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a31      	ldr	r2, [pc, #196]	@ (8000ca4 <HAL_ADC_MspInit+0xe4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d15b      	bne.n	8000c9a <HAL_ADC_MspInit+0xda>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <HAL_ADC_MspInit+0xe8>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	4a30      	ldr	r2, [pc, #192]	@ (8000ca8 <HAL_ADC_MspInit+0xe8>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <HAL_ADC_MspInit+0xe8>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <HAL_ADC_MspInit+0xe8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca8 <HAL_ADC_MspInit+0xe8>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <HAL_ADC_MspInit+0xe8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c12:	2308      	movs	r3, #8
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4821      	ldr	r0, [pc, #132]	@ (8000cac <HAL_ADC_MspInit+0xec>)
 8000c26:	f001 ffe5 	bl	8002bf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c2c:	4a21      	ldr	r2, [pc, #132]	@ (8000cb4 <HAL_ADC_MspInit+0xf4>)
 8000c2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c6e:	4810      	ldr	r0, [pc, #64]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c70:	f001 f988 	bl	8001f84 <HAL_DMA_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000c7a:	f7ff ff73 	bl	8000b64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c82:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c84:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <HAL_ADC_MspInit+0xf0>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	2012      	movs	r0, #18
 8000c90:	f001 f941 	bl	8001f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c94:	2012      	movs	r0, #18
 8000c96:	f001 f95a 	bl	8001f4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	@ 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40012000 	.word	0x40012000
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	20000640 	.word	0x20000640
 8000cb4:	40026410 	.word	0x40026410

08000cb8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	@ 0x38
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a4e      	ldr	r2, [pc, #312]	@ (8000e10 <HAL_ETH_MspInit+0x158>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 8096 	bne.w	8000e08 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	4a4c      	ldr	r2, [pc, #304]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000ce2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ce6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	4b47      	ldr	r3, [pc, #284]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf8:	4a46      	ldr	r2, [pc, #280]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d00:	4b44      	ldr	r3, [pc, #272]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	4b41      	ldr	r3, [pc, #260]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d10:	4a40      	ldr	r2, [pc, #256]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d18:	4b3e      	ldr	r3, [pc, #248]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	4b3b      	ldr	r3, [pc, #236]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d28:	4a3a      	ldr	r2, [pc, #232]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d30:	4b38      	ldr	r3, [pc, #224]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b35      	ldr	r3, [pc, #212]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	4a34      	ldr	r2, [pc, #208]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d48:	4b32      	ldr	r3, [pc, #200]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b2f      	ldr	r3, [pc, #188]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d58:	4a2e      	ldr	r2, [pc, #184]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d60:	4b2c      	ldr	r3, [pc, #176]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6c:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	4a28      	ldr	r2, [pc, #160]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d78:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d84:	2332      	movs	r3, #50	@ 0x32
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d94:	230b      	movs	r3, #11
 8000d96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481e      	ldr	r0, [pc, #120]	@ (8000e18 <HAL_ETH_MspInit+0x160>)
 8000da0:	f001 ff28 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000da4:	2386      	movs	r3, #134	@ 0x86
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db4:	230b      	movs	r3, #11
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4817      	ldr	r0, [pc, #92]	@ (8000e1c <HAL_ETH_MspInit+0x164>)
 8000dc0:	f001 ff18 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	480f      	ldr	r0, [pc, #60]	@ (8000e20 <HAL_ETH_MspInit+0x168>)
 8000de2:	f001 ff07 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000de6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4808      	ldr	r0, [pc, #32]	@ (8000e24 <HAL_ETH_MspInit+0x16c>)
 8000e04:	f001 fef6 	bl	8002bf4 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e08:	bf00      	nop
 8000e0a:	3738      	adds	r7, #56	@ 0x38
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40028000 	.word	0x40028000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40021800 	.word	0x40021800

08000e28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0aa      	sub	sp, #168	@ 0xa8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2284      	movs	r2, #132	@ 0x84
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 fac1 	bl	80073d0 <memset>
  if(hi2c->Instance==I2C1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a22      	ldr	r2, [pc, #136]	@ (8000edc <HAL_I2C_MspInit+0xb4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d13c      	bne.n	8000ed2 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 ffd2 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e72:	f7ff fe77 	bl	8000b64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <HAL_I2C_MspInit+0xb8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <HAL_I2C_MspInit+0xb8>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <HAL_I2C_MspInit+0xb8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e96:	2312      	movs	r3, #18
 8000e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <HAL_I2C_MspInit+0xbc>)
 8000eb6:	f001 fe9d 	bl	8002bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_I2C_MspInit+0xb8>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <HAL_I2C_MspInit+0xb8>)
 8000ec0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_I2C_MspInit+0xb8>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ed2:	bf00      	nop
 8000ed4:	37a8      	adds	r7, #168	@ 0xa8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0aa      	sub	sp, #168	@ 0xa8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	2284      	movs	r2, #132	@ 0x84
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f006 fa61 	bl	80073d0 <memset>
  if(huart->Instance==USART3)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a22      	ldr	r2, [pc, #136]	@ (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d13c      	bne.n	8000f92 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 ff72 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f32:	f7ff fe17 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	4a19      	ldr	r2, [pc, #100]	@ (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a13      	ldr	r2, [pc, #76]	@ (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_UART_MspInit+0xb8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f80:	2307      	movs	r3, #7
 8000f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f86:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <HAL_UART_MspInit+0xbc>)
 8000f8e:	f001 fe31 	bl	8002bf4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f92:	bf00      	nop
 8000f94:	37a8      	adds	r7, #168	@ 0xa8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40004800 	.word	0x40004800
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020c00 	.word	0x40020c00

08000fa8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b0ac      	sub	sp, #176	@ 0xb0
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	2284      	movs	r2, #132	@ 0x84
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f006 fa01 	bl	80073d0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fd6:	d159      	bne.n	800108c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fd8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000fdc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe4:	f107 0318 	add.w	r3, r7, #24
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 ff11 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ff4:	f7ff fdb6 	bl	8000b64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <HAL_PCD_MspInit+0xec>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffc:	4a25      	ldr	r2, [pc, #148]	@ (8001094 <HAL_PCD_MspInit+0xec>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6313      	str	r3, [r2, #48]	@ 0x30
 8001004:	4b23      	ldr	r3, [pc, #140]	@ (8001094 <HAL_PCD_MspInit+0xec>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001010:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800102a:	230a      	movs	r3, #10
 800102c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001034:	4619      	mov	r1, r3
 8001036:	4818      	ldr	r0, [pc, #96]	@ (8001098 <HAL_PCD_MspInit+0xf0>)
 8001038:	f001 fddc 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800103c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001040:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001054:	4619      	mov	r1, r3
 8001056:	4810      	ldr	r0, [pc, #64]	@ (8001098 <HAL_PCD_MspInit+0xf0>)
 8001058:	f001 fdcc 	bl	8002bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <HAL_PCD_MspInit+0xec>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001060:	4a0c      	ldr	r2, [pc, #48]	@ (8001094 <HAL_PCD_MspInit+0xec>)
 8001062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001066:	6353      	str	r3, [r2, #52]	@ 0x34
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_PCD_MspInit+0xec>)
 800106a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <HAL_PCD_MspInit+0xec>)
 8001076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001078:	4a06      	ldr	r2, [pc, #24]	@ (8001094 <HAL_PCD_MspInit+0xec>)
 800107a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <HAL_PCD_MspInit+0xec>)
 8001082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800108c:	bf00      	nop
 800108e:	37b0      	adds	r7, #176	@ 0xb0
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <NMI_Handler+0x4>

080010a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <MemManage_Handler+0x4>

080010b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d6:	f000 f895 	bl	8001204 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010da:	f005 fc8b 	bl	80069f4 <xTaskGetSchedulerState>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d001      	beq.n	80010e8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010e4:	f005 ff38 	bl	8006f58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <ADC_IRQHandler+0x10>)
 80010f2:	f000 fa9c 	bl	800162e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200005f8 	.word	0x200005f8

08001100 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <DMA2_Stream0_IRQHandler+0x10>)
 8001106:	f000 ffeb 	bl	80020e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000640 	.word	0x20000640

08001114 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001170 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113c:	f7ff ffea 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001166:	f006 f93b 	bl	80073e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116a:	f7ff fa01 	bl	8000570 <main>
  bx  lr    
 800116e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001170:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800117c:	080074b4 	.word	0x080074b4
  ldr r2, =_sbss
 8001180:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001184:	20004a78 	.word	0x20004a78

08001188 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <CAN1_RX0_IRQHandler>

0800118a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118e:	2003      	movs	r0, #3
 8001190:	f000 feb6 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001194:	200f      	movs	r0, #15
 8001196:	f000 f805 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119a:	f7ff fce9 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fed1 	bl	8001f6a <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 fe99 	bl	8001f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000d28 	.word	0x20000d28

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000d28 	.word	0x20000d28

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e031      	b.n	8001306 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d109      	bne.n	80012be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fc88 	bl	8000bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d116      	bne.n	80012f8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_ADC_Init+0x84>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	f043 0202 	orr.w	r2, r3, #2
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fc3c 	bl	8001b58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80012f6:	e001      	b.n	80012fc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	ffffeefd 	.word	0xffffeefd

08001314 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_ADC_Start+0x1a>
 800132a:	2302      	movs	r3, #2
 800132c:	e0ad      	b.n	800148a <HAL_ADC_Start+0x176>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	d018      	beq.n	8001376 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001354:	4b50      	ldr	r3, [pc, #320]	@ (8001498 <HAL_ADC_Start+0x184>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a50      	ldr	r2, [pc, #320]	@ (800149c <HAL_ADC_Start+0x188>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0c9a      	lsrs	r2, r3, #18
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001368:	e002      	b.n	8001370 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3b01      	subs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f9      	bne.n	800136a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b01      	cmp	r3, #1
 8001382:	d175      	bne.n	8001470 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001388:	4b45      	ldr	r3, [pc, #276]	@ (80014a0 <HAL_ADC_Start+0x18c>)
 800138a:	4013      	ands	r3, r2
 800138c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013be:	d106      	bne.n	80013ce <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c4:	f023 0206 	bic.w	r2, r3, #6
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013e6:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <HAL_ADC_Start+0x190>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d143      	bne.n	8001488 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	e03a      	b.n	8001488 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a24      	ldr	r2, [pc, #144]	@ (80014a8 <HAL_ADC_Start+0x194>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d10e      	bne.n	800143a <HAL_ADC_Start+0x126>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d107      	bne.n	800143a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001438:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <HAL_ADC_Start+0x190>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b00      	cmp	r3, #0
 8001444:	d120      	bne.n	8001488 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a18      	ldr	r2, [pc, #96]	@ (80014ac <HAL_ADC_Start+0x198>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d11b      	bne.n	8001488 <HAL_ADC_Start+0x174>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d114      	bne.n	8001488 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	e00b      	b.n	8001488 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	f043 0210 	orr.w	r2, r3, #16
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001480:	f043 0201 	orr.w	r2, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000
 800149c:	431bde83 	.word	0x431bde83
 80014a0:	fffff8fe 	.word	0xfffff8fe
 80014a4:	40012300 	.word	0x40012300
 80014a8:	40012000 	.word	0x40012000
 80014ac:	40012200 	.word	0x40012200

080014b0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Stop+0x16>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e01f      	b.n	8001506 <HAL_ADC_Stop+0x56>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d107      	bne.n	80014fc <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_ADC_Stop+0x64>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	f043 0201 	orr.w	r2, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	ffffeefe 	.word	0xffffeefe

08001518 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001534:	d113      	bne.n	800155e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001544:	d10b      	bne.n	800155e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f043 0220 	orr.w	r2, r3, #32
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e063      	b.n	8001626 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800155e:	f7ff fe65 	bl	800122c <HAL_GetTick>
 8001562:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001564:	e021      	b.n	80015aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156c:	d01d      	beq.n	80015aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d007      	beq.n	8001584 <HAL_ADC_PollForConversion+0x6c>
 8001574:	f7ff fe5a 	bl	800122c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d212      	bcs.n	80015aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b02      	cmp	r3, #2
 8001590:	d00b      	beq.n	80015aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f043 0204 	orr.w	r2, r3, #4
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e03d      	b.n	8001626 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d1d6      	bne.n	8001566 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 0212 	mvn.w	r2, #18
 80015c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d123      	bne.n	8001624 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d11f      	bne.n	8001624 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d049      	beq.n	80016f8 <HAL_ADC_IRQHandler+0xca>
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d046      	beq.n	80016f8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b00      	cmp	r3, #0
 8001674:	d105      	bne.n	8001682 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d12b      	bne.n	80016e8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001694:	2b00      	cmp	r3, #0
 8001696:	d127      	bne.n	80016e8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d119      	bne.n	80016e8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0220 	bic.w	r2, r2, #32
 80016c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	f043 0201 	orr.w	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8bd 	bl	8001868 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f06f 0212 	mvn.w	r2, #18
 80016f6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001706:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d057      	beq.n	80017be <HAL_ADC_IRQHandler+0x190>
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d054      	beq.n	80017be <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	2b00      	cmp	r3, #0
 800171e:	d105      	bne.n	800172c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d139      	bne.n	80017ae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001740:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001752:	2b00      	cmp	r3, #0
 8001754:	d12b      	bne.n	80017ae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001760:	2b00      	cmp	r3, #0
 8001762:	d124      	bne.n	80017ae <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11d      	bne.n	80017ae <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001776:	2b00      	cmp	r3, #0
 8001778:	d119      	bne.n	80017ae <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001788:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d105      	bne.n	80017ae <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f043 0201 	orr.w	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 facc 	bl	8001d4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 020c 	mvn.w	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017cc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d017      	beq.n	8001804 <HAL_ADC_IRQHandler+0x1d6>
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d014      	beq.n	8001804 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d10d      	bne.n	8001804 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f841 	bl	800187c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f06f 0201 	mvn.w	r2, #1
 8001802:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001812:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d015      	beq.n	8001846 <HAL_ADC_IRQHandler+0x218>
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d012      	beq.n	8001846 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001824:	f043 0202 	orr.w	r2, r3, #2
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0220 	mvn.w	r2, #32
 8001834:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f82a 	bl	8001890 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f06f 0220 	mvn.w	r2, #32
 8001844:	601a      	str	r2, [r3, #0]
  }
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x1c>
 80018bc:	2302      	movs	r3, #2
 80018be:	e13a      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x292>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b09      	cmp	r3, #9
 80018ce:	d93a      	bls.n	8001946 <HAL_ADC_ConfigChannel+0xa2>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018d8:	d035      	beq.n	8001946 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68d9      	ldr	r1, [r3, #12]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	3b1e      	subs	r3, #30
 80018f0:	2207      	movs	r2, #7
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	400a      	ands	r2, r1
 80018fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a8f      	ldr	r2, [pc, #572]	@ (8001b44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d10a      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68d9      	ldr	r1, [r3, #12]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	061a      	lsls	r2, r3, #24
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800191e:	e039      	b.n	8001994 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68d9      	ldr	r1, [r3, #12]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	4603      	mov	r3, r0
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4403      	add	r3, r0
 8001938:	3b1e      	subs	r3, #30
 800193a:	409a      	lsls	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001944:	e026      	b.n	8001994 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6919      	ldr	r1, [r3, #16]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	b29b      	uxth	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2207      	movs	r2, #7
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43da      	mvns	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	400a      	ands	r2, r1
 800196c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6919      	ldr	r1, [r3, #16]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	b29b      	uxth	r3, r3
 800197e:	4618      	mov	r0, r3
 8001980:	4603      	mov	r3, r0
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4403      	add	r3, r0
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	409a      	lsls	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b06      	cmp	r3, #6
 800199a:	d824      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3b05      	subs	r3, #5
 80019ae:	221f      	movs	r2, #31
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43da      	mvns	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	400a      	ands	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	3b05      	subs	r3, #5
 80019d8:	fa00 f203 	lsl.w	r2, r0, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e4:	e04c      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d824      	bhi.n	8001a38 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b23      	subs	r3, #35	@ 0x23
 8001a00:	221f      	movs	r2, #31
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	3b23      	subs	r3, #35	@ 0x23
 8001a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a36:	e023      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	3b41      	subs	r3, #65	@ 0x41
 8001a4a:	221f      	movs	r2, #31
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43da      	mvns	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	400a      	ands	r2, r1
 8001a58:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3b41      	subs	r3, #65	@ 0x41
 8001a74:	fa00 f203 	lsl.w	r2, r0, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a30      	ldr	r2, [pc, #192]	@ (8001b48 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10a      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1fc>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a92:	d105      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a94:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a2c      	ldr	r2, [pc, #176]	@ (8001b4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001a9a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a9e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a28      	ldr	r2, [pc, #160]	@ (8001b48 <HAL_ADC_ConfigChannel+0x2a4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10f      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x226>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d10b      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001ab2:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4a25      	ldr	r2, [pc, #148]	@ (8001b4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ab8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001abc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001abe:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a22      	ldr	r2, [pc, #136]	@ (8001b4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ac4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ac8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1e      	ldr	r2, [pc, #120]	@ (8001b48 <HAL_ADC_ConfigChannel+0x2a4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d12b      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x288>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d003      	beq.n	8001ae6 <HAL_ADC_ConfigChannel+0x242>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b11      	cmp	r3, #17
 8001ae4:	d122      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4a18      	ldr	r2, [pc, #96]	@ (8001b4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001aec:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001af0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a15      	ldr	r2, [pc, #84]	@ (8001b4c <HAL_ADC_ConfigChannel+0x2a8>)
 8001af8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001afc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a10      	ldr	r2, [pc, #64]	@ (8001b44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d111      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <HAL_ADC_ConfigChannel+0x2ac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a11      	ldr	r2, [pc, #68]	@ (8001b54 <HAL_ADC_ConfigChannel+0x2b0>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0c9a      	lsrs	r2, r3, #18
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b1e:	e002      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f9      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	10000012 	.word	0x10000012
 8001b48:	40012000 	.word	0x40012000
 8001b4c:	40012300 	.word	0x40012300
 8001b50:	20000000 	.word	0x20000000
 8001b54:	431bde83 	.word	0x431bde83

08001b58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b60:	4b78      	ldr	r3, [pc, #480]	@ (8001d44 <ADC_Init+0x1ec>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4a77      	ldr	r2, [pc, #476]	@ (8001d44 <ADC_Init+0x1ec>)
 8001b66:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b6a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b6c:	4b75      	ldr	r3, [pc, #468]	@ (8001d44 <ADC_Init+0x1ec>)
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4973      	ldr	r1, [pc, #460]	@ (8001d44 <ADC_Init+0x1ec>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	021a      	lsls	r2, r3, #8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001bac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6899      	ldr	r1, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be6:	4a58      	ldr	r2, [pc, #352]	@ (8001d48 <ADC_Init+0x1f0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d022      	beq.n	8001c32 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6899      	ldr	r1, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6899      	ldr	r1, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	e00f      	b.n	8001c52 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0202 	bic.w	r2, r2, #2
 8001c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6899      	ldr	r1, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	005a      	lsls	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01b      	beq.n	8001cb8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6859      	ldr	r1, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	3b01      	subs	r3, #1
 8001cac:	035a      	lsls	r2, r3, #13
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	e007      	b.n	8001cc8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	051a      	lsls	r2, r3, #20
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6899      	ldr	r1, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d0a:	025a      	lsls	r2, r3, #9
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6899      	ldr	r1, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	029a      	lsls	r2, r3, #10
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	609a      	str	r2, [r3, #8]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40012300 	.word	0x40012300
 8001d48:	0f000001 	.word	0x0f000001

08001d4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <__NVIC_SetPriorityGrouping+0x40>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8e:	4a04      	ldr	r2, [pc, #16]	@ (8001da0 <__NVIC_SetPriorityGrouping+0x40>)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	60d3      	str	r3, [r2, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00
 8001da4:	05fa0000 	.word	0x05fa0000

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db0b      	blt.n	8001dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4907      	ldr	r1, [pc, #28]	@ (8001dfc <__NVIC_EnableIRQ+0x38>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	@ (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	@ (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	@ 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ecc:	d301      	bcc.n	8001ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00f      	b.n	8001ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <SysTick_Config+0x40>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eda:	210f      	movs	r1, #15
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f7ff ff8e 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee4:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <SysTick_Config+0x40>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eea:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <SysTick_Config+0x40>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff29 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f28:	f7ff ff3e 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff8e 	bl	8001e54 <NVIC_EncodePriority>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5d 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff31 	bl	8001dc4 <__NVIC_EnableIRQ>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffa2 	bl	8001ebc <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff f94c 	bl	800122c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e099      	b.n	80020d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc0:	e00f      	b.n	8001fe2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fc2:	f7ff f933 	bl	800122c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d908      	bls.n	8001fe2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e078      	b.n	80020d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1e8      	bne.n	8001fc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4b38      	ldr	r3, [pc, #224]	@ (80020dc <HAL_DMA_Init+0x158>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	2b04      	cmp	r3, #4
 800203a:	d107      	bne.n	800204c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	4313      	orrs	r3, r2
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f023 0307 	bic.w	r3, r3, #7
 8002062:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	2b04      	cmp	r3, #4
 8002074:	d117      	bne.n	80020a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00e      	beq.n	80020a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f9e9 	bl	8002460 <DMA_CheckFifoParam>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2240      	movs	r2, #64	@ 0x40
 8002098:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020a2:	2301      	movs	r3, #1
 80020a4:	e016      	b.n	80020d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f9a0 	bl	80023f4 <DMA_CalcBaseAndBitshift>
 80020b4:	4603      	mov	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020bc:	223f      	movs	r2, #63	@ 0x3f
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	f010803f 	.word	0xf010803f

080020e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80020ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002328 <HAL_DMA_IRQHandler+0x248>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a8e      	ldr	r2, [pc, #568]	@ (800232c <HAL_DMA_IRQHandler+0x24c>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0a9b      	lsrs	r3, r3, #10
 80020f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210a:	2208      	movs	r2, #8
 800210c:	409a      	lsls	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01a      	beq.n	800214c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002138:	2208      	movs	r2, #8
 800213a:	409a      	lsls	r2, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002150:	2201      	movs	r2, #1
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d012      	beq.n	8002182 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216e:	2201      	movs	r2, #1
 8002170:	409a      	lsls	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002186:	2204      	movs	r2, #4
 8002188:	409a      	lsls	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d012      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00b      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a4:	2204      	movs	r2, #4
 80021a6:	409a      	lsls	r2, r3
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	2210      	movs	r2, #16
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d043      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d03c      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	2210      	movs	r2, #16
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d018      	beq.n	8002222 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d108      	bne.n	8002210 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d024      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
 800220e:	e01f      	b.n	8002250 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01b      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
 8002220:	e016      	b.n	8002250 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0208 	bic.w	r2, r2, #8
 800223e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002254:	2220      	movs	r2, #32
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 808f 	beq.w	8002380 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8087 	beq.w	8002380 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2220      	movs	r2, #32
 8002278:	409a      	lsls	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b05      	cmp	r3, #5
 8002288:	d136      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0216 	bic.w	r2, r2, #22
 8002298:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <HAL_DMA_IRQHandler+0x1da>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0208 	bic.w	r2, r2, #8
 80022c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ce:	223f      	movs	r2, #63	@ 0x3f
 80022d0:	409a      	lsls	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d07e      	beq.n	80023ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
        }
        return;
 80022f6:	e079      	b.n	80023ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d01d      	beq.n	8002342 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10d      	bne.n	8002330 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002318:	2b00      	cmp	r3, #0
 800231a:	d031      	beq.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	4798      	blx	r3
 8002324:	e02c      	b.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
 8002326:	bf00      	nop
 8002328:	20000000 	.word	0x20000000
 800232c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d023      	beq.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
 8002340:	e01e      	b.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10f      	bne.n	8002370 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0210 	bic.w	r2, r2, #16
 800235e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	2b00      	cmp	r3, #0
 8002386:	d032      	beq.n	80023ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d022      	beq.n	80023da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2205      	movs	r2, #5
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	3301      	adds	r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d307      	bcc.n	80023c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f2      	bne.n	80023ac <HAL_DMA_IRQHandler+0x2cc>
 80023c6:	e000      	b.n	80023ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
 80023ea:	e000      	b.n	80023ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80023ec:	bf00      	nop
    }
  }
}
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3b10      	subs	r3, #16
 8002404:	4a13      	ldr	r2, [pc, #76]	@ (8002454 <DMA_CalcBaseAndBitshift+0x60>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800240e:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <DMA_CalcBaseAndBitshift+0x64>)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d908      	bls.n	8002434 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <DMA_CalcBaseAndBitshift+0x68>)
 800242a:	4013      	ands	r3, r2
 800242c:	1d1a      	adds	r2, r3, #4
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	659a      	str	r2, [r3, #88]	@ 0x58
 8002432:	e006      	b.n	8002442 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b08      	ldr	r3, [pc, #32]	@ (800245c <DMA_CalcBaseAndBitshift+0x68>)
 800243c:	4013      	ands	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	aaaaaaab 	.word	0xaaaaaaab
 8002458:	0800749c 	.word	0x0800749c
 800245c:	fffffc00 	.word	0xfffffc00

08002460 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d11f      	bne.n	80024ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d856      	bhi.n	800252e <DMA_CheckFifoParam+0xce>
 8002480:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <DMA_CheckFifoParam+0x28>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	08002499 	.word	0x08002499
 800248c:	080024ab 	.word	0x080024ab
 8002490:	08002499 	.word	0x08002499
 8002494:	0800252f 	.word	0x0800252f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d046      	beq.n	8002532 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a8:	e043      	b.n	8002532 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024b2:	d140      	bne.n	8002536 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b8:	e03d      	b.n	8002536 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c2:	d121      	bne.n	8002508 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d837      	bhi.n	800253a <DMA_CheckFifoParam+0xda>
 80024ca:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <DMA_CheckFifoParam+0x70>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024e7 	.word	0x080024e7
 80024d8:	080024e1 	.word	0x080024e1
 80024dc:	080024f9 	.word	0x080024f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e030      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d025      	beq.n	800253e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f6:	e022      	b.n	800253e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002500:	d11f      	bne.n	8002542 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002506:	e01c      	b.n	8002542 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d903      	bls.n	8002516 <DMA_CheckFifoParam+0xb6>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d003      	beq.n	800251c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002514:	e018      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      break;
 800251a:	e015      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002520:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      break;
 800252c:	e00b      	b.n	8002546 <DMA_CheckFifoParam+0xe6>
      break;
 800252e:	bf00      	nop
 8002530:	e00a      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e008      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e006      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
 800253c:	e004      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 800253e:	bf00      	nop
 8002540:	e002      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;   
 8002542:	bf00      	nop
 8002544:	e000      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
    }
  } 
  
  return status; 
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop

08002558 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e086      	b.n	8002678 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fe fb9b 	bl	8000cb8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	4b3f      	ldr	r3, [pc, #252]	@ (8002680 <HAL_ETH_Init+0x128>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	4a3e      	ldr	r2, [pc, #248]	@ (8002680 <HAL_ETH_Init+0x128>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800258c:	6453      	str	r3, [r2, #68]	@ 0x44
 800258e:	4b3c      	ldr	r3, [pc, #240]	@ (8002680 <HAL_ETH_Init+0x128>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800259a:	4b3a      	ldr	r3, [pc, #232]	@ (8002684 <HAL_ETH_Init+0x12c>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a39      	ldr	r2, [pc, #228]	@ (8002684 <HAL_ETH_Init+0x12c>)
 80025a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025a6:	4b37      	ldr	r3, [pc, #220]	@ (8002684 <HAL_ETH_Init+0x12c>)
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4935      	ldr	r1, [pc, #212]	@ (8002684 <HAL_ETH_Init+0x12c>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025b4:	4b33      	ldr	r3, [pc, #204]	@ (8002684 <HAL_ETH_Init+0x12c>)
 80025b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025d0:	f7fe fe2c 	bl	800122c <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025d6:	e011      	b.n	80025fc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025d8:	f7fe fe28 	bl	800122c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025e6:	d909      	bls.n	80025fc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2204      	movs	r2, #4
 80025ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	22e0      	movs	r2, #224	@ 0xe0
 80025f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e03d      	b.n	8002678 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1e4      	bne.n	80025d8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f97a 	bl	8002908 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fa25 	bl	8002a64 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa7b 	bl	8002b16 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	461a      	mov	r2, r3
 8002626:	2100      	movs	r1, #0
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f9e3 	bl	80029f4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800263c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <HAL_ETH_Init+0x130>)
 800264c:	430b      	orrs	r3, r1
 800264e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002662:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2210      	movs	r2, #16
 8002672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	40013800 	.word	0x40013800
 8002688:	00020060 	.word	0x00020060

0800268c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <ETH_SetMACConfig+0x164>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	7b9b      	ldrb	r3, [r3, #14]
 80026aa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	7c12      	ldrb	r2, [r2, #16]
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d102      	bne.n	80026ba <ETH_SetMACConfig+0x2e>
 80026b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026b8:	e000      	b.n	80026bc <ETH_SetMACConfig+0x30>
 80026ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	7c52      	ldrb	r2, [r2, #17]
 80026c2:	2a00      	cmp	r2, #0
 80026c4:	d102      	bne.n	80026cc <ETH_SetMACConfig+0x40>
 80026c6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80026ca:	e000      	b.n	80026ce <ETH_SetMACConfig+0x42>
 80026cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	7fdb      	ldrb	r3, [r3, #31]
 80026da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80026dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	7f92      	ldrb	r2, [r2, #30]
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d102      	bne.n	80026f2 <ETH_SetMACConfig+0x66>
 80026ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026f0:	e000      	b.n	80026f4 <ETH_SetMACConfig+0x68>
 80026f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80026f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	7f1b      	ldrb	r3, [r3, #28]
 80026fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002702:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	791b      	ldrb	r3, [r3, #4]
 8002708:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800270a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002712:	2a00      	cmp	r2, #0
 8002714:	d102      	bne.n	800271c <ETH_SetMACConfig+0x90>
 8002716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271a:	e000      	b.n	800271e <ETH_SetMACConfig+0x92>
 800271c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800271e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	7bdb      	ldrb	r3, [r3, #15]
 8002724:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002726:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800272c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002734:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002736:	4313      	orrs	r3, r2
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800274e:	2001      	movs	r0, #1
 8002750:	f7fe fd78 	bl	8001244 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800276a:	4013      	ands	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002772:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800277a:	2a00      	cmp	r2, #0
 800277c:	d101      	bne.n	8002782 <ETH_SetMACConfig+0xf6>
 800277e:	2280      	movs	r2, #128	@ 0x80
 8002780:	e000      	b.n	8002784 <ETH_SetMACConfig+0xf8>
 8002782:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002784:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800278a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002792:	2a01      	cmp	r2, #1
 8002794:	d101      	bne.n	800279a <ETH_SetMACConfig+0x10e>
 8002796:	2208      	movs	r2, #8
 8002798:	e000      	b.n	800279c <ETH_SetMACConfig+0x110>
 800279a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800279c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80027a4:	2a01      	cmp	r2, #1
 80027a6:	d101      	bne.n	80027ac <ETH_SetMACConfig+0x120>
 80027a8:	2204      	movs	r2, #4
 80027aa:	e000      	b.n	80027ae <ETH_SetMACConfig+0x122>
 80027ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80027b6:	2a01      	cmp	r2, #1
 80027b8:	d101      	bne.n	80027be <ETH_SetMACConfig+0x132>
 80027ba:	2202      	movs	r2, #2
 80027bc:	e000      	b.n	80027c0 <ETH_SetMACConfig+0x134>
 80027be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027c0:	4313      	orrs	r3, r2
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d8:	2001      	movs	r0, #1
 80027da:	f7fe fd33 	bl	8001244 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	fd20810f 	.word	0xfd20810f

080027f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4b3d      	ldr	r3, [pc, #244]	@ (8002904 <ETH_SetDMAConfig+0x110>)
 800280e:	4013      	ands	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	7b1b      	ldrb	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <ETH_SetDMAConfig+0x2c>
 800281a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800281e:	e000      	b.n	8002822 <ETH_SetDMAConfig+0x2e>
 8002820:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	7b5b      	ldrb	r3, [r3, #13]
 8002826:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002828:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	7f52      	ldrb	r2, [r2, #29]
 800282e:	2a00      	cmp	r2, #0
 8002830:	d102      	bne.n	8002838 <ETH_SetDMAConfig+0x44>
 8002832:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002836:	e000      	b.n	800283a <ETH_SetDMAConfig+0x46>
 8002838:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800283a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	7b9b      	ldrb	r3, [r3, #14]
 8002840:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002842:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002848:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	7f1b      	ldrb	r3, [r3, #28]
 800284e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002850:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	7f9b      	ldrb	r3, [r3, #30]
 8002856:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002858:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800285e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002866:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002868:	4313      	orrs	r3, r2
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800288a:	2001      	movs	r0, #1
 800288c:	f7fe fcda 	bl	8001244 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002898:	461a      	mov	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	791b      	ldrb	r3, [r3, #4]
 80028a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80028ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f7fe fcab 	bl	8001244 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	f8de3f23 	.word	0xf8de3f23

08002908 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b0a6      	sub	sp, #152	@ 0x98
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800291c:	2300      	movs	r3, #0
 800291e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800294a:	2300      	movs	r3, #0
 800294c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002954:	2300      	movs	r3, #0
 8002956:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800295e:	2300      	movs	r3, #0
 8002960:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002970:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002974:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002976:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800297a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002982:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff fe7f 	bl	800268c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800298e:	2301      	movs	r3, #1
 8002990:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002992:	2301      	movs	r3, #1
 8002994:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800299c:	2301      	movs	r3, #1
 800299e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029ba:	2301      	movs	r3, #1
 80029bc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029c8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029ce:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029de:	f107 0308 	add.w	r3, r7, #8
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff05 	bl	80027f4 <ETH_SetDMAConfig>
}
 80029ea:	bf00      	nop
 80029ec:	3798      	adds	r7, #152	@ 0x98
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3305      	adds	r3, #5
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	3204      	adds	r2, #4
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <ETH_MACAddressConfig+0x68>)
 8002a16:	4413      	add	r3, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3303      	adds	r3, #3
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	061a      	lsls	r2, r3, #24
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3302      	adds	r3, #2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3301      	adds	r3, #1
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <ETH_MACAddressConfig+0x6c>)
 8002a46:	4413      	add	r3, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	6013      	str	r3, [r2, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40028040 	.word	0x40028040
 8002a60:	40028044 	.word	0x40028044

08002a64 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e03e      	b.n	8002af0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68d9      	ldr	r1, [r3, #12]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	3206      	adds	r2, #6
 8002aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d80c      	bhi.n	8002ad4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68d9      	ldr	r1, [r3, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	461a      	mov	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	e004      	b.n	8002ade <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3301      	adds	r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d9bd      	bls.n	8002a72 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b08:	611a      	str	r2, [r3, #16]
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e048      	b.n	8002bb6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6919      	ldr	r1, [r3, #16]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b60:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	3212      	adds	r2, #18
 8002b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d80c      	bhi.n	8002ba6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6919      	ldr	r1, [r3, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	e004      	b.n	8002bb0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	461a      	mov	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d9b3      	bls.n	8002b24 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002be6:	60da      	str	r2, [r3, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	@ 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	e175      	b.n	8002f00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c14:	2201      	movs	r2, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	f040 8164 	bne.w	8002efa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d005      	beq.n	8002c4a <HAL_GPIO_Init+0x56>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d130      	bne.n	8002cac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	2203      	movs	r2, #3
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 0201 	and.w	r2, r3, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d017      	beq.n	8002ce8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d123      	bne.n	8002d3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	08da      	lsrs	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3208      	adds	r2, #8
 8002cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	08da      	lsrs	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3208      	adds	r2, #8
 8002d36:	69b9      	ldr	r1, [r7, #24]
 8002d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0203 	and.w	r2, r3, #3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80be 	beq.w	8002efa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7e:	4b66      	ldr	r3, [pc, #408]	@ (8002f18 <HAL_GPIO_Init+0x324>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	4a65      	ldr	r2, [pc, #404]	@ (8002f18 <HAL_GPIO_Init+0x324>)
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d8a:	4b63      	ldr	r3, [pc, #396]	@ (8002f18 <HAL_GPIO_Init+0x324>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d96:	4a61      	ldr	r2, [pc, #388]	@ (8002f1c <HAL_GPIO_Init+0x328>)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	@ (8002f20 <HAL_GPIO_Init+0x32c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d037      	beq.n	8002e32 <HAL_GPIO_Init+0x23e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a57      	ldr	r2, [pc, #348]	@ (8002f24 <HAL_GPIO_Init+0x330>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d031      	beq.n	8002e2e <HAL_GPIO_Init+0x23a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a56      	ldr	r2, [pc, #344]	@ (8002f28 <HAL_GPIO_Init+0x334>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02b      	beq.n	8002e2a <HAL_GPIO_Init+0x236>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a55      	ldr	r2, [pc, #340]	@ (8002f2c <HAL_GPIO_Init+0x338>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d025      	beq.n	8002e26 <HAL_GPIO_Init+0x232>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a54      	ldr	r2, [pc, #336]	@ (8002f30 <HAL_GPIO_Init+0x33c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01f      	beq.n	8002e22 <HAL_GPIO_Init+0x22e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a53      	ldr	r2, [pc, #332]	@ (8002f34 <HAL_GPIO_Init+0x340>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d019      	beq.n	8002e1e <HAL_GPIO_Init+0x22a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a52      	ldr	r2, [pc, #328]	@ (8002f38 <HAL_GPIO_Init+0x344>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_GPIO_Init+0x226>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a51      	ldr	r2, [pc, #324]	@ (8002f3c <HAL_GPIO_Init+0x348>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00d      	beq.n	8002e16 <HAL_GPIO_Init+0x222>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a50      	ldr	r2, [pc, #320]	@ (8002f40 <HAL_GPIO_Init+0x34c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x21e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4f      	ldr	r2, [pc, #316]	@ (8002f44 <HAL_GPIO_Init+0x350>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_GPIO_Init+0x21a>
 8002e0a:	2309      	movs	r3, #9
 8002e0c:	e012      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e0e:	230a      	movs	r3, #10
 8002e10:	e010      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e12:	2308      	movs	r3, #8
 8002e14:	e00e      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e16:	2307      	movs	r3, #7
 8002e18:	e00c      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	e00a      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e1e:	2305      	movs	r3, #5
 8002e20:	e008      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e22:	2304      	movs	r3, #4
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e26:	2303      	movs	r3, #3
 8002e28:	e004      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_GPIO_Init+0x240>
 8002e32:	2300      	movs	r3, #0
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	f002 0203 	and.w	r2, r2, #3
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	4093      	lsls	r3, r2
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e44:	4935      	ldr	r1, [pc, #212]	@ (8002f1c <HAL_GPIO_Init+0x328>)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e52:	4b3d      	ldr	r3, [pc, #244]	@ (8002f48 <HAL_GPIO_Init+0x354>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e76:	4a34      	ldr	r2, [pc, #208]	@ (8002f48 <HAL_GPIO_Init+0x354>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e7c:	4b32      	ldr	r3, [pc, #200]	@ (8002f48 <HAL_GPIO_Init+0x354>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea0:	4a29      	ldr	r2, [pc, #164]	@ (8002f48 <HAL_GPIO_Init+0x354>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ea6:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_GPIO_Init+0x354>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eca:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <HAL_GPIO_Init+0x354>)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <HAL_GPIO_Init+0x354>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef4:	4a14      	ldr	r2, [pc, #80]	@ (8002f48 <HAL_GPIO_Init+0x354>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3301      	adds	r3, #1
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b0f      	cmp	r3, #15
 8002f04:	f67f ae86 	bls.w	8002c14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3724      	adds	r7, #36	@ 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40013800 	.word	0x40013800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020800 	.word	0x40020800
 8002f2c:	40020c00 	.word	0x40020c00
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40021400 	.word	0x40021400
 8002f38:	40021800 	.word	0x40021800
 8002f3c:	40021c00 	.word	0x40021c00
 8002f40:	40022000 	.word	0x40022000
 8002f44:	40022400 	.word	0x40022400
 8002f48:	40013c00 	.word	0x40013c00

08002f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f5c:	787b      	ldrb	r3, [r7, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f68:	e003      	b.n	8002f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	041a      	lsls	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	619a      	str	r2, [r3, #24]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e08b      	b.n	80030aa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fd ff3e 	bl	8000e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	@ 0x24
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fe0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	e006      	b.n	8003008 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003006:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d108      	bne.n	8003022 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	e007      	b.n	8003032 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003030:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b1d      	ldr	r3, [pc, #116]	@ (80030b4 <HAL_I2C_Init+0x134>)
 800303e:	430b      	orrs	r3, r1
 8003040:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003050:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69d9      	ldr	r1, [r3, #28]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	02008000 	.word	0x02008000

080030b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d138      	bne.n	8003140 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030d8:	2302      	movs	r3, #2
 80030da:	e032      	b.n	8003142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2224      	movs	r2, #36	@ 0x24
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800310a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800314e:	b480      	push	{r7}
 8003150:	b085      	sub	sp, #20
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b20      	cmp	r3, #32
 8003162:	d139      	bne.n	80031d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800316e:	2302      	movs	r3, #2
 8003170:	e033      	b.n	80031da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2224      	movs	r2, #36	@ 0x24
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e000      	b.n	80031da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
  }
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af02      	add	r7, sp, #8
 80031ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e108      	b.n	800340a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fd fec8 	bl	8000fa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2203      	movs	r2, #3
 800321c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003226:	d102      	bne.n	800322e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f001 feb2 	bl	8004f9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	7c1a      	ldrb	r2, [r3, #16]
 8003240:	f88d 2000 	strb.w	r2, [sp]
 8003244:	3304      	adds	r3, #4
 8003246:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003248:	f001 fe4e 	bl	8004ee8 <USB_CoreInit>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0d5      	b.n	800340a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f001 feaa 	bl	8004fbe <USB_SetCurrentMode>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0c6      	b.n	800340a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	e04a      	b.n	8003318 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	3315      	adds	r3, #21
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3314      	adds	r3, #20
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	b298      	uxth	r0, r3
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	332e      	adds	r3, #46	@ 0x2e
 80032be:	4602      	mov	r2, r0
 80032c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3318      	adds	r3, #24
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	331c      	adds	r3, #28
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3320      	adds	r3, #32
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3324      	adds	r3, #36	@ 0x24
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	3301      	adds	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	791b      	ldrb	r3, [r3, #4]
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3af      	bcc.n	8003282 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
 8003326:	e044      	b.n	80033b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	3301      	adds	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	791b      	ldrb	r3, [r3, #4]
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d3b5      	bcc.n	8003328 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7c1a      	ldrb	r2, [r3, #16]
 80033c4:	f88d 2000 	strb.w	r2, [sp]
 80033c8:	3304      	adds	r3, #4
 80033ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033cc:	f001 fe44 	bl	8005058 <USB_DevInit>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e013      	b.n	800340a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7b1b      	ldrb	r3, [r3, #12]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d102      	bne.n	80033fe <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f80b 	bl	8003414 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f001 ffff 	bl	8005406 <USB_DevDisconnect>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003442:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <HAL_PCDEx_ActivateLPM+0x44>)
 8003444:	4313      	orrs	r3, r2
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	10000003 	.word	0x10000003

0800345c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003460:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a04      	ldr	r2, [pc, #16]	@ (8003478 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40007000 	.word	0x40007000

0800347c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003484:	2300      	movs	r3, #0
 8003486:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e291      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8087 	beq.w	80035ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a0:	4b96      	ldr	r3, [pc, #600]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d00c      	beq.n	80034c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ac:	4b93      	ldr	r3, [pc, #588]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d112      	bne.n	80034de <HAL_RCC_OscConfig+0x62>
 80034b8:	4b90      	ldr	r3, [pc, #576]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034c4:	d10b      	bne.n	80034de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c6:	4b8d      	ldr	r3, [pc, #564]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d06c      	beq.n	80035ac <HAL_RCC_OscConfig+0x130>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d168      	bne.n	80035ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e26b      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x7a>
 80034e8:	4b84      	ldr	r3, [pc, #528]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a83      	ldr	r2, [pc, #524]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80034ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e02e      	b.n	8003554 <HAL_RCC_OscConfig+0xd8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x9c>
 80034fe:	4b7f      	ldr	r3, [pc, #508]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7e      	ldr	r2, [pc, #504]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b7c      	ldr	r3, [pc, #496]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a7b      	ldr	r2, [pc, #492]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003510:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e01d      	b.n	8003554 <HAL_RCC_OscConfig+0xd8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0xc0>
 8003522:	4b76      	ldr	r3, [pc, #472]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a75      	ldr	r2, [pc, #468]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b73      	ldr	r3, [pc, #460]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a72      	ldr	r2, [pc, #456]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0xd8>
 800353c:	4b6f      	ldr	r3, [pc, #444]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a6e      	ldr	r2, [pc, #440]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b6c      	ldr	r3, [pc, #432]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6b      	ldr	r2, [pc, #428]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 800354e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fd fe66 	bl	800122c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fd fe62 	bl	800122c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	@ 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e21f      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b61      	ldr	r3, [pc, #388]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0xe8>
 8003582:	e014      	b.n	80035ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fd fe52 	bl	800122c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358c:	f7fd fe4e 	bl	800122c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	@ 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e20b      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	4b57      	ldr	r3, [pc, #348]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x110>
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d069      	beq.n	800368e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ba:	4b50      	ldr	r3, [pc, #320]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b4d      	ldr	r3, [pc, #308]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d11c      	bne.n	800360c <HAL_RCC_OscConfig+0x190>
 80035d2:	4b4a      	ldr	r3, [pc, #296]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d116      	bne.n	800360c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035de:	4b47      	ldr	r3, [pc, #284]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_RCC_OscConfig+0x17a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e1df      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	4b41      	ldr	r3, [pc, #260]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	493d      	ldr	r1, [pc, #244]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	e040      	b.n	800368e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d023      	beq.n	800365c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003614:	4b39      	ldr	r3, [pc, #228]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a38      	ldr	r2, [pc, #224]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fe04 	bl	800122c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fd fe00 	bl	800122c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e1bd      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363a:	4b30      	ldr	r3, [pc, #192]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b2d      	ldr	r3, [pc, #180]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4929      	ldr	r1, [pc, #164]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
 800365a:	e018      	b.n	800368e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365c:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a26      	ldr	r2, [pc, #152]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd fde0 	bl	800122c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003670:	f7fd fddc 	bl	800122c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e199      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	4b1e      	ldr	r3, [pc, #120]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d038      	beq.n	800370c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d019      	beq.n	80036d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a2:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80036a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a6:	4a15      	ldr	r2, [pc, #84]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ae:	f7fd fdbd 	bl	800122c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b6:	f7fd fdb9 	bl	800122c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e176      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c8:	4b0c      	ldr	r3, [pc, #48]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80036ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x23a>
 80036d4:	e01a      	b.n	800370c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d6:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80036d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036da:	4a08      	ldr	r2, [pc, #32]	@ (80036fc <HAL_RCC_OscConfig+0x280>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fd fda3 	bl	800122c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ea:	f7fd fd9f 	bl	800122c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d903      	bls.n	8003700 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e15c      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
 80036fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	4b91      	ldr	r3, [pc, #580]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ee      	bne.n	80036ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80a4 	beq.w	8003862 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371a:	4b8b      	ldr	r3, [pc, #556]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10d      	bne.n	8003742 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	4b88      	ldr	r3, [pc, #544]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	4a87      	ldr	r2, [pc, #540]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003730:	6413      	str	r3, [r2, #64]	@ 0x40
 8003732:	4b85      	ldr	r3, [pc, #532]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003742:	4b82      	ldr	r3, [pc, #520]	@ (800394c <HAL_RCC_OscConfig+0x4d0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d118      	bne.n	8003780 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800374e:	4b7f      	ldr	r3, [pc, #508]	@ (800394c <HAL_RCC_OscConfig+0x4d0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7e      	ldr	r2, [pc, #504]	@ (800394c <HAL_RCC_OscConfig+0x4d0>)
 8003754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375a:	f7fd fd67 	bl	800122c <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003762:	f7fd fd63 	bl	800122c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b64      	cmp	r3, #100	@ 0x64
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e120      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003774:	4b75      	ldr	r3, [pc, #468]	@ (800394c <HAL_RCC_OscConfig+0x4d0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d106      	bne.n	8003796 <HAL_RCC_OscConfig+0x31a>
 8003788:	4b6f      	ldr	r3, [pc, #444]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378c:	4a6e      	ldr	r2, [pc, #440]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6713      	str	r3, [r2, #112]	@ 0x70
 8003794:	e02d      	b.n	80037f2 <HAL_RCC_OscConfig+0x376>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x33c>
 800379e:	4b6a      	ldr	r3, [pc, #424]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a2:	4a69      	ldr	r2, [pc, #420]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037aa:	4b67      	ldr	r3, [pc, #412]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	4a66      	ldr	r2, [pc, #408]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b6:	e01c      	b.n	80037f2 <HAL_RCC_OscConfig+0x376>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d10c      	bne.n	80037da <HAL_RCC_OscConfig+0x35e>
 80037c0:	4b61      	ldr	r3, [pc, #388]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c4:	4a60      	ldr	r2, [pc, #384]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80037cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d8:	e00b      	b.n	80037f2 <HAL_RCC_OscConfig+0x376>
 80037da:	4b5b      	ldr	r3, [pc, #364]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037de:	4a5a      	ldr	r2, [pc, #360]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e6:	4b58      	ldr	r3, [pc, #352]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ea:	4a57      	ldr	r2, [pc, #348]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d015      	beq.n	8003826 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fa:	f7fd fd17 	bl	800122c <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fd fd13 	bl	800122c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0ce      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	4b4b      	ldr	r3, [pc, #300]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ee      	beq.n	8003802 <HAL_RCC_OscConfig+0x386>
 8003824:	e014      	b.n	8003850 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fd fd01 	bl	800122c <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fd fcfd 	bl	800122c <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0b8      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003844:	4b40      	ldr	r3, [pc, #256]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ee      	bne.n	800382e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b3c      	ldr	r3, [pc, #240]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	4a3b      	ldr	r2, [pc, #236]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003860:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80a4 	beq.w	80039b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386c:	4b36      	ldr	r3, [pc, #216]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d06b      	beq.n	8003950 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d149      	bne.n	8003914 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003880:	4b31      	ldr	r3, [pc, #196]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a30      	ldr	r2, [pc, #192]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800388a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd fcce 	bl	800122c <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7fd fcca 	bl	800122c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e087      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b28      	ldr	r3, [pc, #160]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	3b01      	subs	r3, #1
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	4313      	orrs	r3, r2
 80038d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80038da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038de:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e0:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a18      	ldr	r2, [pc, #96]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80038e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd fc9e 	bl	800122c <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fd fc9a 	bl	800122c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e057      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003906:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x478>
 8003912:	e04f      	b.n	80039b4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003914:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0b      	ldr	r2, [pc, #44]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800391a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fc84 	bl	800122c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fd fc80 	bl	800122c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e03d      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x4ac>
 8003946:	e035      	b.n	80039b4 <HAL_RCC_OscConfig+0x538>
 8003948:	40023800 	.word	0x40023800
 800394c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003950:	4b1b      	ldr	r3, [pc, #108]	@ (80039c0 <HAL_RCC_OscConfig+0x544>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d028      	beq.n	80039b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d121      	bne.n	80039b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d11a      	bne.n	80039b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003986:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003988:	4293      	cmp	r3, r2
 800398a:	d111      	bne.n	80039b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	3b01      	subs	r3, #1
 800399a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800

080039c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0d0      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d910      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b67      	ldr	r3, [pc, #412]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 020f 	bic.w	r2, r3, #15
 80039f2:	4965      	ldr	r1, [pc, #404]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b63      	ldr	r3, [pc, #396]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b8      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a24:	4b59      	ldr	r3, [pc, #356]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a58      	ldr	r2, [pc, #352]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a3c:	4b53      	ldr	r3, [pc, #332]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a52      	ldr	r2, [pc, #328]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b50      	ldr	r3, [pc, #320]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	494d      	ldr	r1, [pc, #308]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d040      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b47      	ldr	r3, [pc, #284]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d115      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e073      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	4b3d      	ldr	r3, [pc, #244]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e06b      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa6:	4b39      	ldr	r3, [pc, #228]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4936      	ldr	r1, [pc, #216]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab8:	f7fd fbb8 	bl	800122c <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac0:	f7fd fbb4 	bl	800122c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e053      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 020c 	and.w	r2, r3, #12
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1eb      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b27      	ldr	r3, [pc, #156]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d210      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b24      	ldr	r3, [pc, #144]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 020f 	bic.w	r2, r3, #15
 8003afe:	4922      	ldr	r1, [pc, #136]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e032      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4916      	ldr	r1, [pc, #88]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b42:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490e      	ldr	r1, [pc, #56]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b56:	f000 f821 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	490a      	ldr	r1, [pc, #40]	@ (8003b90 <HAL_RCC_ClockConfig+0x1cc>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	4a09      	ldr	r2, [pc, #36]	@ (8003b94 <HAL_RCC_ClockConfig+0x1d0>)
 8003b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b72:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <HAL_RCC_ClockConfig+0x1d4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd fb14 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023c00 	.word	0x40023c00
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	08007484 	.word	0x08007484
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000004 	.word	0x20000004

08003b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba0:	b094      	sub	sp, #80	@ 0x50
 8003ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ba8:	2300      	movs	r3, #0
 8003baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bac:	2300      	movs	r3, #0
 8003bae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb4:	4b79      	ldr	r3, [pc, #484]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d00d      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x40>
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	f200 80e1 	bhi.w	8003d88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bce:	e0db      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b73      	ldr	r3, [pc, #460]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bd4:	e0db      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd6:	4b73      	ldr	r3, [pc, #460]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bda:	e0d8      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003be6:	4b6d      	ldr	r3, [pc, #436]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d063      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c06:	2300      	movs	r3, #0
 8003c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c0e:	4622      	mov	r2, r4
 8003c10:	462b      	mov	r3, r5
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	0159      	lsls	r1, r3, #5
 8003c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c20:	0150      	lsls	r0, r2, #5
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4621      	mov	r1, r4
 8003c28:	1a51      	subs	r1, r2, r1
 8003c2a:	6139      	str	r1, [r7, #16]
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c40:	4659      	mov	r1, fp
 8003c42:	018b      	lsls	r3, r1, #6
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	018a      	lsls	r2, r1, #6
 8003c4e:	4651      	mov	r1, sl
 8003c50:	ebb2 0801 	subs.w	r8, r2, r1
 8003c54:	4659      	mov	r1, fp
 8003c56:	eb63 0901 	sbc.w	r9, r3, r1
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c6e:	4690      	mov	r8, r2
 8003c70:	4699      	mov	r9, r3
 8003c72:	4623      	mov	r3, r4
 8003c74:	eb18 0303 	adds.w	r3, r8, r3
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	462b      	mov	r3, r5
 8003c7c:	eb49 0303 	adc.w	r3, r9, r3
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c8e:	4629      	mov	r1, r5
 8003c90:	024b      	lsls	r3, r1, #9
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c98:	4621      	mov	r1, r4
 8003c9a:	024a      	lsls	r2, r1, #9
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cac:	f7fc fab0 	bl	8000210 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb8:	e058      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cba:	4b38      	ldr	r3, [pc, #224]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	f04f 0000 	mov.w	r0, #0
 8003cdc:	f04f 0100 	mov.w	r1, #0
 8003ce0:	0159      	lsls	r1, r3, #5
 8003ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce6:	0150      	lsls	r0, r2, #5
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4641      	mov	r1, r8
 8003cee:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d10:	eb63 050b 	sbc.w	r5, r3, fp
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	00eb      	lsls	r3, r5, #3
 8003d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d22:	00e2      	lsls	r2, r4, #3
 8003d24:	4614      	mov	r4, r2
 8003d26:	461d      	mov	r5, r3
 8003d28:	4643      	mov	r3, r8
 8003d2a:	18e3      	adds	r3, r4, r3
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	464b      	mov	r3, r9
 8003d30:	eb45 0303 	adc.w	r3, r5, r3
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d42:	4629      	mov	r1, r5
 8003d44:	028b      	lsls	r3, r1, #10
 8003d46:	4621      	mov	r1, r4
 8003d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	028a      	lsls	r2, r1, #10
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d56:	2200      	movs	r2, #0
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	61fa      	str	r2, [r7, #28]
 8003d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d60:	f7fc fa56 	bl	8000210 <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4613      	mov	r3, r2
 8003d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	3301      	adds	r3, #1
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d86:	e002      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3750      	adds	r7, #80	@ 0x50
 8003d94:	46bd      	mov	sp, r7
 8003d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	00f42400 	.word	0x00f42400
 8003da4:	007a1200 	.word	0x007a1200

08003da8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dac:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000000 	.word	0x20000000

08003dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc4:	f7ff fff0 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0a9b      	lsrs	r3, r3, #10
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40023800 	.word	0x40023800
 8003de4:	08007494 	.word	0x08007494

08003de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dec:	f7ff ffdc 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0b5b      	lsrs	r3, r3, #13
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4903      	ldr	r1, [pc, #12]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	08007494 	.word	0x08007494

08003e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d012      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e38:	4b69      	ldr	r3, [pc, #420]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a68      	ldr	r2, [pc, #416]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	4b66      	ldr	r3, [pc, #408]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4c:	4964      	ldr	r1, [pc, #400]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d017      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e70:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e78:	4959      	ldr	r1, [pc, #356]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e88:	d101      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d017      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	494a      	ldr	r1, [pc, #296]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec4:	d101      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 808b 	beq.w	800400a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	4a39      	ldr	r2, [pc, #228]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f00:	4b37      	ldr	r3, [pc, #220]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f0c:	4b35      	ldr	r3, [pc, #212]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a34      	ldr	r2, [pc, #208]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f18:	f7fd f988 	bl	800122c <HAL_GetTick>
 8003f1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f20:	f7fd f984 	bl	800122c <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	@ 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e357      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f32:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f3e:	4b28      	ldr	r3, [pc, #160]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d035      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d02e      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f66:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f70:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f7e:	4a18      	ldr	r2, [pc, #96]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f84:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d114      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fd f94c 	bl	800122c <HAL_GetTick>
 8003f94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	e00a      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f98:	f7fd f948 	bl	800122c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e319      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fae:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0ee      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc6:	d111      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fd4:	4b04      	ldr	r3, [pc, #16]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fd6:	400b      	ands	r3, r1
 8003fd8:	4901      	ldr	r1, [pc, #4]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	0ffffcff 	.word	0x0ffffcff
 8003fec:	4baa      	ldr	r3, [pc, #680]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4aa9      	ldr	r2, [pc, #676]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ff6:	6093      	str	r3, [r2, #8]
 8003ff8:	4ba7      	ldr	r3, [pc, #668]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004004:	49a4      	ldr	r1, [pc, #656]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004006:	4313      	orrs	r3, r2
 8004008:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d010      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004016:	4ba0      	ldr	r3, [pc, #640]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800401c:	4a9e      	ldr	r2, [pc, #632]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004022:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004026:	4b9c      	ldr	r3, [pc, #624]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004028:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	4999      	ldr	r1, [pc, #612]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004044:	4b94      	ldr	r3, [pc, #592]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004052:	4991      	ldr	r1, [pc, #580]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004066:	4b8c      	ldr	r3, [pc, #560]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004074:	4988      	ldr	r1, [pc, #544]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004088:	4b83      	ldr	r3, [pc, #524]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004096:	4980      	ldr	r1, [pc, #512]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b8:	4977      	ldr	r1, [pc, #476]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040cc:	4b72      	ldr	r3, [pc, #456]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d2:	f023 0203 	bic.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	496f      	ldr	r1, [pc, #444]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f4:	f023 020c 	bic.w	r2, r3, #12
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fc:	4966      	ldr	r1, [pc, #408]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004110:	4b61      	ldr	r3, [pc, #388]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411e:	495e      	ldr	r1, [pc, #376]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004132:	4b59      	ldr	r3, [pc, #356]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004140:	4955      	ldr	r1, [pc, #340]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004154:	4b50      	ldr	r3, [pc, #320]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004162:	494d      	ldr	r1, [pc, #308]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004176:	4b48      	ldr	r3, [pc, #288]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004184:	4944      	ldr	r1, [pc, #272]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004198:	4b3f      	ldr	r3, [pc, #252]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a6:	493c      	ldr	r1, [pc, #240]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041ba:	4b37      	ldr	r3, [pc, #220]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c8:	4933      	ldr	r1, [pc, #204]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ea:	492b      	ldr	r1, [pc, #172]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d011      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041fe:	4b26      	ldr	r3, [pc, #152]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004204:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800420c:	4922      	ldr	r1, [pc, #136]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800421c:	d101      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800421e:	2301      	movs	r3, #1
 8004220:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800422e:	2301      	movs	r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800423e:	4b16      	ldr	r3, [pc, #88]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004244:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424c:	4912      	ldr	r1, [pc, #72]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004260:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004266:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004270:	4909      	ldr	r1, [pc, #36]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d006      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80d9 	beq.w	800443e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800428c:	4b02      	ldr	r3, [pc, #8]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a01      	ldr	r2, [pc, #4]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004292:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004296:	e001      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004298:	40023800 	.word	0x40023800
 800429c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429e:	f7fc ffc5 	bl	800122c <HAL_GetTick>
 80042a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042a6:	f7fc ffc1 	bl	800122c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b64      	cmp	r3, #100	@ 0x64
 80042b2:	d901      	bls.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e194      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b8:	4b6c      	ldr	r3, [pc, #432]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d021      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11d      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042d8:	4b64      	ldr	r3, [pc, #400]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042e6:	4b61      	ldr	r3, [pc, #388]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ec:	0e1b      	lsrs	r3, r3, #24
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	019a      	lsls	r2, r3, #6
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	431a      	orrs	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	061b      	lsls	r3, r3, #24
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	071b      	lsls	r3, r3, #28
 800430c:	4957      	ldr	r1, [pc, #348]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004332:	2b00      	cmp	r3, #0
 8004334:	d02e      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800433e:	d129      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004340:	4b4a      	ldr	r3, [pc, #296]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004346:	0c1b      	lsrs	r3, r3, #16
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800434e:	4b47      	ldr	r3, [pc, #284]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004354:	0f1b      	lsrs	r3, r3, #28
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	019a      	lsls	r2, r3, #6
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	431a      	orrs	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	071b      	lsls	r3, r3, #28
 8004374:	493d      	ldr	r1, [pc, #244]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800437c:	4b3b      	ldr	r3, [pc, #236]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800437e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004382:	f023 021f 	bic.w	r2, r3, #31
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	3b01      	subs	r3, #1
 800438c:	4937      	ldr	r1, [pc, #220]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01d      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043a0:	4b32      	ldr	r3, [pc, #200]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a6:	0e1b      	lsrs	r3, r3, #24
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043ae:	4b2f      	ldr	r3, [pc, #188]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b4:	0f1b      	lsrs	r3, r3, #28
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	019a      	lsls	r2, r3, #6
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	041b      	lsls	r3, r3, #16
 80043c8:	431a      	orrs	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	061b      	lsls	r3, r3, #24
 80043ce:	431a      	orrs	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	071b      	lsls	r3, r3, #28
 80043d4:	4925      	ldr	r1, [pc, #148]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d011      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	019a      	lsls	r2, r3, #6
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	041b      	lsls	r3, r3, #16
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	061b      	lsls	r3, r3, #24
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	071b      	lsls	r3, r3, #28
 8004404:	4919      	ldr	r1, [pc, #100]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800440c:	4b17      	ldr	r3, [pc, #92]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a16      	ldr	r2, [pc, #88]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004412:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004418:	f7fc ff08 	bl	800122c <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004420:	f7fc ff04 	bl	800122c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	@ 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e0d7      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004432:	4b0e      	ldr	r3, [pc, #56]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b01      	cmp	r3, #1
 8004442:	f040 80cd 	bne.w	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004446:	4b09      	ldr	r3, [pc, #36]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a08      	ldr	r2, [pc, #32]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004452:	f7fc feeb 	bl	800122c <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004458:	e00a      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800445a:	f7fc fee7 	bl	800122c <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b64      	cmp	r3, #100	@ 0x64
 8004466:	d903      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e0ba      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800446c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004470:	4b5e      	ldr	r3, [pc, #376]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800447c:	d0ed      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800449a:	2b00      	cmp	r3, #0
 800449c:	d02e      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d12a      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044a6:	4b51      	ldr	r3, [pc, #324]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044b4:	4b4d      	ldr	r3, [pc, #308]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ba:	0f1b      	lsrs	r3, r3, #28
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	019a      	lsls	r2, r3, #6
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	071b      	lsls	r3, r3, #28
 80044da:	4944      	ldr	r1, [pc, #272]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044e2:	4b42      	ldr	r3, [pc, #264]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	3b01      	subs	r3, #1
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	493d      	ldr	r1, [pc, #244]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d022      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800450c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004510:	d11d      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004512:	4b36      	ldr	r3, [pc, #216]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004518:	0e1b      	lsrs	r3, r3, #24
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004520:	4b32      	ldr	r3, [pc, #200]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004526:	0f1b      	lsrs	r3, r3, #28
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	019a      	lsls	r2, r3, #6
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	431a      	orrs	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	061b      	lsls	r3, r3, #24
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	071b      	lsls	r3, r3, #28
 8004546:	4929      	ldr	r1, [pc, #164]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d028      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800455a:	4b24      	ldr	r3, [pc, #144]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004560:	0e1b      	lsrs	r3, r3, #24
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004568:	4b20      	ldr	r3, [pc, #128]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	019a      	lsls	r2, r3, #6
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	431a      	orrs	r2, r3
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	061b      	lsls	r3, r3, #24
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	071b      	lsls	r3, r3, #28
 800458e:	4917      	ldr	r1, [pc, #92]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004596:	4b15      	ldr	r3, [pc, #84]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800459c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	4911      	ldr	r1, [pc, #68]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045ac:	4b0f      	ldr	r3, [pc, #60]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0e      	ldr	r2, [pc, #56]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b8:	f7fc fe38 	bl	800122c <HAL_GetTick>
 80045bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045c0:	f7fc fe34 	bl	800122c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	@ 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e007      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045d2:	4b06      	ldr	r3, [pc, #24]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045de:	d1ef      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800

080045f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e040      	b.n	8004684 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fc68 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	@ 0x24
 800461c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fa8c 	bl	8004b54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f825 	bl	800468c <UART_SetConfig>
 8004642:	4603      	mov	r3, r0
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e01b      	b.n	8004684 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800465a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800466a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fb0b 	bl	8004c98 <UART_CheckIdleState>
 8004682:	4603      	mov	r3, r0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4ba6      	ldr	r3, [pc, #664]	@ (8004950 <UART_SetConfig+0x2c4>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	6979      	ldr	r1, [r7, #20]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a94      	ldr	r2, [pc, #592]	@ (8004954 <UART_SetConfig+0x2c8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d120      	bne.n	800474a <UART_SetConfig+0xbe>
 8004708:	4b93      	ldr	r3, [pc, #588]	@ (8004958 <UART_SetConfig+0x2cc>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b03      	cmp	r3, #3
 8004714:	d816      	bhi.n	8004744 <UART_SetConfig+0xb8>
 8004716:	a201      	add	r2, pc, #4	@ (adr r2, 800471c <UART_SetConfig+0x90>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	0800472d 	.word	0x0800472d
 8004720:	08004739 	.word	0x08004739
 8004724:	08004733 	.word	0x08004733
 8004728:	0800473f 	.word	0x0800473f
 800472c:	2301      	movs	r3, #1
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e150      	b.n	80049d4 <UART_SetConfig+0x348>
 8004732:	2302      	movs	r3, #2
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e14d      	b.n	80049d4 <UART_SetConfig+0x348>
 8004738:	2304      	movs	r3, #4
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e14a      	b.n	80049d4 <UART_SetConfig+0x348>
 800473e:	2308      	movs	r3, #8
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e147      	b.n	80049d4 <UART_SetConfig+0x348>
 8004744:	2310      	movs	r3, #16
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e144      	b.n	80049d4 <UART_SetConfig+0x348>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a83      	ldr	r2, [pc, #524]	@ (800495c <UART_SetConfig+0x2d0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d132      	bne.n	80047ba <UART_SetConfig+0x12e>
 8004754:	4b80      	ldr	r3, [pc, #512]	@ (8004958 <UART_SetConfig+0x2cc>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d828      	bhi.n	80047b4 <UART_SetConfig+0x128>
 8004762:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <UART_SetConfig+0xdc>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	0800479d 	.word	0x0800479d
 800476c:	080047b5 	.word	0x080047b5
 8004770:	080047b5 	.word	0x080047b5
 8004774:	080047b5 	.word	0x080047b5
 8004778:	080047a9 	.word	0x080047a9
 800477c:	080047b5 	.word	0x080047b5
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080047b5 	.word	0x080047b5
 8004788:	080047a3 	.word	0x080047a3
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047b5 	.word	0x080047b5
 8004798:	080047af 	.word	0x080047af
 800479c:	2300      	movs	r3, #0
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e118      	b.n	80049d4 <UART_SetConfig+0x348>
 80047a2:	2302      	movs	r3, #2
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e115      	b.n	80049d4 <UART_SetConfig+0x348>
 80047a8:	2304      	movs	r3, #4
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e112      	b.n	80049d4 <UART_SetConfig+0x348>
 80047ae:	2308      	movs	r3, #8
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e10f      	b.n	80049d4 <UART_SetConfig+0x348>
 80047b4:	2310      	movs	r3, #16
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e10c      	b.n	80049d4 <UART_SetConfig+0x348>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a68      	ldr	r2, [pc, #416]	@ (8004960 <UART_SetConfig+0x2d4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d120      	bne.n	8004806 <UART_SetConfig+0x17a>
 80047c4:	4b64      	ldr	r3, [pc, #400]	@ (8004958 <UART_SetConfig+0x2cc>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047ce:	2b30      	cmp	r3, #48	@ 0x30
 80047d0:	d013      	beq.n	80047fa <UART_SetConfig+0x16e>
 80047d2:	2b30      	cmp	r3, #48	@ 0x30
 80047d4:	d814      	bhi.n	8004800 <UART_SetConfig+0x174>
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d009      	beq.n	80047ee <UART_SetConfig+0x162>
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d810      	bhi.n	8004800 <UART_SetConfig+0x174>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <UART_SetConfig+0x15c>
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d006      	beq.n	80047f4 <UART_SetConfig+0x168>
 80047e6:	e00b      	b.n	8004800 <UART_SetConfig+0x174>
 80047e8:	2300      	movs	r3, #0
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e0f2      	b.n	80049d4 <UART_SetConfig+0x348>
 80047ee:	2302      	movs	r3, #2
 80047f0:	77fb      	strb	r3, [r7, #31]
 80047f2:	e0ef      	b.n	80049d4 <UART_SetConfig+0x348>
 80047f4:	2304      	movs	r3, #4
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e0ec      	b.n	80049d4 <UART_SetConfig+0x348>
 80047fa:	2308      	movs	r3, #8
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e0e9      	b.n	80049d4 <UART_SetConfig+0x348>
 8004800:	2310      	movs	r3, #16
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e0e6      	b.n	80049d4 <UART_SetConfig+0x348>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a56      	ldr	r2, [pc, #344]	@ (8004964 <UART_SetConfig+0x2d8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d120      	bne.n	8004852 <UART_SetConfig+0x1c6>
 8004810:	4b51      	ldr	r3, [pc, #324]	@ (8004958 <UART_SetConfig+0x2cc>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800481a:	2bc0      	cmp	r3, #192	@ 0xc0
 800481c:	d013      	beq.n	8004846 <UART_SetConfig+0x1ba>
 800481e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004820:	d814      	bhi.n	800484c <UART_SetConfig+0x1c0>
 8004822:	2b80      	cmp	r3, #128	@ 0x80
 8004824:	d009      	beq.n	800483a <UART_SetConfig+0x1ae>
 8004826:	2b80      	cmp	r3, #128	@ 0x80
 8004828:	d810      	bhi.n	800484c <UART_SetConfig+0x1c0>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <UART_SetConfig+0x1a8>
 800482e:	2b40      	cmp	r3, #64	@ 0x40
 8004830:	d006      	beq.n	8004840 <UART_SetConfig+0x1b4>
 8004832:	e00b      	b.n	800484c <UART_SetConfig+0x1c0>
 8004834:	2300      	movs	r3, #0
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e0cc      	b.n	80049d4 <UART_SetConfig+0x348>
 800483a:	2302      	movs	r3, #2
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e0c9      	b.n	80049d4 <UART_SetConfig+0x348>
 8004840:	2304      	movs	r3, #4
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e0c6      	b.n	80049d4 <UART_SetConfig+0x348>
 8004846:	2308      	movs	r3, #8
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e0c3      	b.n	80049d4 <UART_SetConfig+0x348>
 800484c:	2310      	movs	r3, #16
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e0c0      	b.n	80049d4 <UART_SetConfig+0x348>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a44      	ldr	r2, [pc, #272]	@ (8004968 <UART_SetConfig+0x2dc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d125      	bne.n	80048a8 <UART_SetConfig+0x21c>
 800485c:	4b3e      	ldr	r3, [pc, #248]	@ (8004958 <UART_SetConfig+0x2cc>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800486a:	d017      	beq.n	800489c <UART_SetConfig+0x210>
 800486c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004870:	d817      	bhi.n	80048a2 <UART_SetConfig+0x216>
 8004872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004876:	d00b      	beq.n	8004890 <UART_SetConfig+0x204>
 8004878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800487c:	d811      	bhi.n	80048a2 <UART_SetConfig+0x216>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <UART_SetConfig+0x1fe>
 8004882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004886:	d006      	beq.n	8004896 <UART_SetConfig+0x20a>
 8004888:	e00b      	b.n	80048a2 <UART_SetConfig+0x216>
 800488a:	2300      	movs	r3, #0
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e0a1      	b.n	80049d4 <UART_SetConfig+0x348>
 8004890:	2302      	movs	r3, #2
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e09e      	b.n	80049d4 <UART_SetConfig+0x348>
 8004896:	2304      	movs	r3, #4
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e09b      	b.n	80049d4 <UART_SetConfig+0x348>
 800489c:	2308      	movs	r3, #8
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e098      	b.n	80049d4 <UART_SetConfig+0x348>
 80048a2:	2310      	movs	r3, #16
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e095      	b.n	80049d4 <UART_SetConfig+0x348>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2f      	ldr	r2, [pc, #188]	@ (800496c <UART_SetConfig+0x2e0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d125      	bne.n	80048fe <UART_SetConfig+0x272>
 80048b2:	4b29      	ldr	r3, [pc, #164]	@ (8004958 <UART_SetConfig+0x2cc>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048c0:	d017      	beq.n	80048f2 <UART_SetConfig+0x266>
 80048c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048c6:	d817      	bhi.n	80048f8 <UART_SetConfig+0x26c>
 80048c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048cc:	d00b      	beq.n	80048e6 <UART_SetConfig+0x25a>
 80048ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d2:	d811      	bhi.n	80048f8 <UART_SetConfig+0x26c>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <UART_SetConfig+0x254>
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048dc:	d006      	beq.n	80048ec <UART_SetConfig+0x260>
 80048de:	e00b      	b.n	80048f8 <UART_SetConfig+0x26c>
 80048e0:	2301      	movs	r3, #1
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e076      	b.n	80049d4 <UART_SetConfig+0x348>
 80048e6:	2302      	movs	r3, #2
 80048e8:	77fb      	strb	r3, [r7, #31]
 80048ea:	e073      	b.n	80049d4 <UART_SetConfig+0x348>
 80048ec:	2304      	movs	r3, #4
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e070      	b.n	80049d4 <UART_SetConfig+0x348>
 80048f2:	2308      	movs	r3, #8
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e06d      	b.n	80049d4 <UART_SetConfig+0x348>
 80048f8:	2310      	movs	r3, #16
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e06a      	b.n	80049d4 <UART_SetConfig+0x348>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <UART_SetConfig+0x2e4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d138      	bne.n	800497a <UART_SetConfig+0x2ee>
 8004908:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <UART_SetConfig+0x2cc>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004912:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004916:	d017      	beq.n	8004948 <UART_SetConfig+0x2bc>
 8004918:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800491c:	d82a      	bhi.n	8004974 <UART_SetConfig+0x2e8>
 800491e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004922:	d00b      	beq.n	800493c <UART_SetConfig+0x2b0>
 8004924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004928:	d824      	bhi.n	8004974 <UART_SetConfig+0x2e8>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <UART_SetConfig+0x2aa>
 800492e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004932:	d006      	beq.n	8004942 <UART_SetConfig+0x2b6>
 8004934:	e01e      	b.n	8004974 <UART_SetConfig+0x2e8>
 8004936:	2300      	movs	r3, #0
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e04b      	b.n	80049d4 <UART_SetConfig+0x348>
 800493c:	2302      	movs	r3, #2
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e048      	b.n	80049d4 <UART_SetConfig+0x348>
 8004942:	2304      	movs	r3, #4
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e045      	b.n	80049d4 <UART_SetConfig+0x348>
 8004948:	2308      	movs	r3, #8
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e042      	b.n	80049d4 <UART_SetConfig+0x348>
 800494e:	bf00      	nop
 8004950:	efff69f3 	.word	0xefff69f3
 8004954:	40011000 	.word	0x40011000
 8004958:	40023800 	.word	0x40023800
 800495c:	40004400 	.word	0x40004400
 8004960:	40004800 	.word	0x40004800
 8004964:	40004c00 	.word	0x40004c00
 8004968:	40005000 	.word	0x40005000
 800496c:	40011400 	.word	0x40011400
 8004970:	40007800 	.word	0x40007800
 8004974:	2310      	movs	r3, #16
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e02c      	b.n	80049d4 <UART_SetConfig+0x348>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a72      	ldr	r2, [pc, #456]	@ (8004b48 <UART_SetConfig+0x4bc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d125      	bne.n	80049d0 <UART_SetConfig+0x344>
 8004984:	4b71      	ldr	r3, [pc, #452]	@ (8004b4c <UART_SetConfig+0x4c0>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800498e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004992:	d017      	beq.n	80049c4 <UART_SetConfig+0x338>
 8004994:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004998:	d817      	bhi.n	80049ca <UART_SetConfig+0x33e>
 800499a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800499e:	d00b      	beq.n	80049b8 <UART_SetConfig+0x32c>
 80049a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a4:	d811      	bhi.n	80049ca <UART_SetConfig+0x33e>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <UART_SetConfig+0x326>
 80049aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049ae:	d006      	beq.n	80049be <UART_SetConfig+0x332>
 80049b0:	e00b      	b.n	80049ca <UART_SetConfig+0x33e>
 80049b2:	2300      	movs	r3, #0
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e00d      	b.n	80049d4 <UART_SetConfig+0x348>
 80049b8:	2302      	movs	r3, #2
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e00a      	b.n	80049d4 <UART_SetConfig+0x348>
 80049be:	2304      	movs	r3, #4
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e007      	b.n	80049d4 <UART_SetConfig+0x348>
 80049c4:	2308      	movs	r3, #8
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e004      	b.n	80049d4 <UART_SetConfig+0x348>
 80049ca:	2310      	movs	r3, #16
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e001      	b.n	80049d4 <UART_SetConfig+0x348>
 80049d0:	2310      	movs	r3, #16
 80049d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049dc:	d15b      	bne.n	8004a96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80049de:	7ffb      	ldrb	r3, [r7, #31]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d828      	bhi.n	8004a36 <UART_SetConfig+0x3aa>
 80049e4:	a201      	add	r2, pc, #4	@ (adr r2, 80049ec <UART_SetConfig+0x360>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	08004a11 	.word	0x08004a11
 80049f0:	08004a19 	.word	0x08004a19
 80049f4:	08004a21 	.word	0x08004a21
 80049f8:	08004a37 	.word	0x08004a37
 80049fc:	08004a27 	.word	0x08004a27
 8004a00:	08004a37 	.word	0x08004a37
 8004a04:	08004a37 	.word	0x08004a37
 8004a08:	08004a37 	.word	0x08004a37
 8004a0c:	08004a2f 	.word	0x08004a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a10:	f7ff f9d6 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8004a14:	61b8      	str	r0, [r7, #24]
        break;
 8004a16:	e013      	b.n	8004a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a18:	f7ff f9e6 	bl	8003de8 <HAL_RCC_GetPCLK2Freq>
 8004a1c:	61b8      	str	r0, [r7, #24]
        break;
 8004a1e:	e00f      	b.n	8004a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a20:	4b4b      	ldr	r3, [pc, #300]	@ (8004b50 <UART_SetConfig+0x4c4>)
 8004a22:	61bb      	str	r3, [r7, #24]
        break;
 8004a24:	e00c      	b.n	8004a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a26:	f7ff f8b9 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8004a2a:	61b8      	str	r0, [r7, #24]
        break;
 8004a2c:	e008      	b.n	8004a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a32:	61bb      	str	r3, [r7, #24]
        break;
 8004a34:	e004      	b.n	8004a40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d074      	beq.n	8004b30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	005a      	lsls	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	441a      	add	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b0f      	cmp	r3, #15
 8004a60:	d916      	bls.n	8004a90 <UART_SetConfig+0x404>
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a68:	d212      	bcs.n	8004a90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f023 030f 	bic.w	r3, r3, #15
 8004a72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	085b      	lsrs	r3, r3, #1
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	89fb      	ldrh	r3, [r7, #14]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	89fa      	ldrh	r2, [r7, #14]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	e04f      	b.n	8004b30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	77bb      	strb	r3, [r7, #30]
 8004a94:	e04c      	b.n	8004b30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a96:	7ffb      	ldrb	r3, [r7, #31]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d828      	bhi.n	8004aee <UART_SetConfig+0x462>
 8004a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <UART_SetConfig+0x418>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ac9 	.word	0x08004ac9
 8004aa8:	08004ad1 	.word	0x08004ad1
 8004aac:	08004ad9 	.word	0x08004ad9
 8004ab0:	08004aef 	.word	0x08004aef
 8004ab4:	08004adf 	.word	0x08004adf
 8004ab8:	08004aef 	.word	0x08004aef
 8004abc:	08004aef 	.word	0x08004aef
 8004ac0:	08004aef 	.word	0x08004aef
 8004ac4:	08004ae7 	.word	0x08004ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac8:	f7ff f97a 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8004acc:	61b8      	str	r0, [r7, #24]
        break;
 8004ace:	e013      	b.n	8004af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad0:	f7ff f98a 	bl	8003de8 <HAL_RCC_GetPCLK2Freq>
 8004ad4:	61b8      	str	r0, [r7, #24]
        break;
 8004ad6:	e00f      	b.n	8004af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b50 <UART_SetConfig+0x4c4>)
 8004ada:	61bb      	str	r3, [r7, #24]
        break;
 8004adc:	e00c      	b.n	8004af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ade:	f7ff f85d 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8004ae2:	61b8      	str	r0, [r7, #24]
        break;
 8004ae4:	e008      	b.n	8004af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aea:	61bb      	str	r3, [r7, #24]
        break;
 8004aec:	e004      	b.n	8004af8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	77bb      	strb	r3, [r7, #30]
        break;
 8004af6:	bf00      	nop
    }

    if (pclk != 0U)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d018      	beq.n	8004b30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	085a      	lsrs	r2, r3, #1
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	441a      	add	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b0f      	cmp	r3, #15
 8004b16:	d909      	bls.n	8004b2c <UART_SetConfig+0x4a0>
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b1e:	d205      	bcs.n	8004b2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60da      	str	r2, [r3, #12]
 8004b2a:	e001      	b.n	8004b30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40007c00 	.word	0x40007c00
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	00f42400 	.word	0x00f42400

08004b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01a      	beq.n	8004c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c52:	d10a      	bne.n	8004c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08c      	sub	sp, #48	@ 0x30
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ca8:	f7fc fac0 	bl	800122c <HAL_GetTick>
 8004cac:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d12e      	bne.n	8004d1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f83b 	bl	8004d46 <UART_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d021      	beq.n	8004d1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cea:	623b      	str	r3, [r7, #32]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	69b9      	ldr	r1, [r7, #24]
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	617b      	str	r3, [r7, #20]
   return(result);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e6      	bne.n	8004cd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e011      	b.n	8004d3e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3728      	adds	r7, #40	@ 0x28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	4613      	mov	r3, r2
 8004d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d56:	e04f      	b.n	8004df8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d04b      	beq.n	8004df8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d60:	f7fc fa64 	bl	800122c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d302      	bcc.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e04e      	b.n	8004e18 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d037      	beq.n	8004df8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b80      	cmp	r3, #128	@ 0x80
 8004d8c:	d034      	beq.n	8004df8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d031      	beq.n	8004df8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d110      	bne.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2208      	movs	r2, #8
 8004da8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f838 	bl	8004e20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2208      	movs	r2, #8
 8004db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e029      	b.n	8004e18 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dd2:	d111      	bne.n	8004df8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ddc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f81e 	bl	8004e20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e00f      	b.n	8004e18 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69da      	ldr	r2, [r3, #28]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d0a0      	beq.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b095      	sub	sp, #84	@ 0x54
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e46:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e48:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e6      	bne.n	8004e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3308      	adds	r3, #8
 8004e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3308      	adds	r3, #8
 8004e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e5      	bne.n	8004e5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d118      	bne.n	8004ec8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f023 0310 	bic.w	r3, r3, #16
 8004eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6979      	ldr	r1, [r7, #20]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e6      	bne.n	8004e96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004edc:	bf00      	nop
 8004ede:	3754      	adds	r7, #84	@ 0x54
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ee8:	b084      	sub	sp, #16
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	f107 001c 	add.w	r0, r7, #28
 8004ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004efa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d121      	bne.n	8004f46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	4b21      	ldr	r3, [pc, #132]	@ (8004f98 <USB_CoreInit+0xb0>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d105      	bne.n	8004f3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fa92 	bl	8005464 <USB_CoreReset>
 8004f40:	4603      	mov	r3, r0
 8004f42:	73fb      	strb	r3, [r7, #15]
 8004f44:	e010      	b.n	8004f68 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fa86 	bl	8005464 <USB_CoreReset>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f68:	7fbb      	ldrb	r3, [r7, #30]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d10b      	bne.n	8004f86 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f043 0206 	orr.w	r2, r3, #6
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f92:	b004      	add	sp, #16
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	ffbdffbf 	.word	0xffbdffbf

08004f9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f023 0201 	bic.w	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d115      	bne.n	800500c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fec:	200a      	movs	r0, #10
 8004fee:	f7fc f929 	bl	8001244 <HAL_Delay>
      ms += 10U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	330a      	adds	r3, #10
 8004ff6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fa25 	bl	8005448 <USB_GetMode>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b01      	cmp	r3, #1
 8005002:	d01e      	beq.n	8005042 <USB_SetCurrentMode+0x84>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2bc7      	cmp	r3, #199	@ 0xc7
 8005008:	d9f0      	bls.n	8004fec <USB_SetCurrentMode+0x2e>
 800500a:	e01a      	b.n	8005042 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d115      	bne.n	800503e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800501e:	200a      	movs	r0, #10
 8005020:	f7fc f910 	bl	8001244 <HAL_Delay>
      ms += 10U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	330a      	adds	r3, #10
 8005028:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa0c 	bl	8005448 <USB_GetMode>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <USB_SetCurrentMode+0x84>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2bc7      	cmp	r3, #199	@ 0xc7
 800503a:	d9f0      	bls.n	800501e <USB_SetCurrentMode+0x60>
 800503c:	e001      	b.n	8005042 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e005      	b.n	800504e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2bc8      	cmp	r3, #200	@ 0xc8
 8005046:	d101      	bne.n	800504c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005058:	b084      	sub	sp, #16
 800505a:	b580      	push	{r7, lr}
 800505c:	b086      	sub	sp, #24
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	e009      	b.n	800508c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3340      	adds	r3, #64	@ 0x40
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	2200      	movs	r2, #0
 8005084:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3301      	adds	r3, #1
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b0e      	cmp	r3, #14
 8005090:	d9f2      	bls.n	8005078 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005092:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005096:	2b00      	cmp	r3, #0
 8005098:	d11c      	bne.n	80050d4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050a8:	f043 0302 	orr.w	r3, r3, #2
 80050ac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	e005      	b.n	80050e0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050e6:	461a      	mov	r2, r3
 80050e8:	2300      	movs	r3, #0
 80050ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10d      	bne.n	8005110 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050fc:	2100      	movs	r1, #0
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f968 	bl	80053d4 <USB_SetDevSpeed>
 8005104:	e008      	b.n	8005118 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005106:	2101      	movs	r1, #1
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f963 	bl	80053d4 <USB_SetDevSpeed>
 800510e:	e003      	b.n	8005118 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005110:	2103      	movs	r1, #3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f95e 	bl	80053d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005118:	2110      	movs	r1, #16
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8fa 	bl	8005314 <USB_FlushTxFifo>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f924 	bl	8005378 <USB_FlushRxFifo>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005140:	461a      	mov	r2, r3
 8005142:	2300      	movs	r3, #0
 8005144:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514c:	461a      	mov	r2, r3
 800514e:	2300      	movs	r3, #0
 8005150:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005158:	461a      	mov	r2, r3
 800515a:	2300      	movs	r3, #0
 800515c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	e043      	b.n	80051ec <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005176:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800517a:	d118      	bne.n	80051ae <USB_DevInit+0x156>
    {
      if (i == 0U)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800518e:	461a      	mov	r2, r3
 8005190:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e013      	b.n	80051c0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a4:	461a      	mov	r2, r3
 80051a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	e008      	b.n	80051c0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ba:	461a      	mov	r2, r3
 80051bc:	2300      	movs	r3, #0
 80051be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051cc:	461a      	mov	r2, r3
 80051ce:	2300      	movs	r3, #0
 80051d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051de:	461a      	mov	r2, r3
 80051e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	3301      	adds	r3, #1
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051f0:	461a      	mov	r2, r3
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d3b5      	bcc.n	8005164 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	e043      	b.n	8005286 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005210:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005214:	d118      	bne.n	8005248 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	e013      	b.n	800525a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523e:	461a      	mov	r2, r3
 8005240:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e008      	b.n	800525a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005254:	461a      	mov	r2, r3
 8005256:	2300      	movs	r3, #0
 8005258:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005266:	461a      	mov	r2, r3
 8005268:	2300      	movs	r3, #0
 800526a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005278:	461a      	mov	r2, r3
 800527a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800527e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	3301      	adds	r3, #1
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800528a:	461a      	mov	r2, r3
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4293      	cmp	r3, r2
 8005290:	d3b5      	bcc.n	80051fe <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80052b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f043 0210 	orr.w	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	4b0f      	ldr	r3, [pc, #60]	@ (800530c <USB_DevInit+0x2b4>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f043 0208 	orr.w	r2, r3, #8
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d105      	bne.n	80052fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <USB_DevInit+0x2b8>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005308:	b004      	add	sp, #16
 800530a:	4770      	bx	lr
 800530c:	803c3800 	.word	0x803c3800
 8005310:	40000004 	.word	0x40000004

08005314 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3301      	adds	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800532e:	d901      	bls.n	8005334 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e01b      	b.n	800536c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	daf2      	bge.n	8005322 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	019b      	lsls	r3, r3, #6
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005358:	d901      	bls.n	800535e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e006      	b.n	800536c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b20      	cmp	r3, #32
 8005368:	d0f0      	beq.n	800534c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005390:	d901      	bls.n	8005396 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e018      	b.n	80053c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	daf2      	bge.n	8005384 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2210      	movs	r2, #16
 80053a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053b4:	d901      	bls.n	80053ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e006      	b.n	80053c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d0f0      	beq.n	80053a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005420:	f023 0303 	bic.w	r3, r3, #3
 8005424:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005434:	f043 0302 	orr.w	r3, r3, #2
 8005438:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f003 0301 	and.w	r3, r3, #1
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3301      	adds	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800547c:	d901      	bls.n	8005482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e022      	b.n	80054c8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	daf2      	bge.n	8005470 <USB_CoreReset+0xc>

  count = 10U;
 800548a:	230a      	movs	r3, #10
 800548c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800548e:	e002      	b.n	8005496 <USB_CoreReset+0x32>
  {
    count--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3b01      	subs	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f9      	bne.n	8005490 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f043 0201 	orr.w	r2, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054b4:	d901      	bls.n	80054ba <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e006      	b.n	80054c8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d0f0      	beq.n	80054a8 <USB_CoreReset+0x44>

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80054e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054e6:	2b84      	cmp	r3, #132	@ 0x84
 80054e8:	d005      	beq.n	80054f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80054ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	3303      	adds	r3, #3
 80054f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054f6:	68fb      	ldr	r3, [r7, #12]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005508:	f000 fe56 	bl	80061b8 <vTaskStartScheduler>
  
  return osOK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	bd80      	pop	{r7, pc}

08005512 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005514:	b089      	sub	sp, #36	@ 0x24
 8005516:	af04      	add	r7, sp, #16
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d020      	beq.n	8005566 <osThreadCreate+0x54>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01c      	beq.n	8005566 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685c      	ldr	r4, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691e      	ldr	r6, [r3, #16]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff ffc8 	bl	80054d4 <makeFreeRtosPriority>
 8005544:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800554e:	9202      	str	r2, [sp, #8]
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	9100      	str	r1, [sp, #0]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	4632      	mov	r2, r6
 8005558:	4629      	mov	r1, r5
 800555a:	4620      	mov	r0, r4
 800555c:	f000 fc54 	bl	8005e08 <xTaskCreateStatic>
 8005560:	4603      	mov	r3, r0
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e01c      	b.n	80055a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685c      	ldr	r4, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005572:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ffaa 	bl	80054d4 <makeFreeRtosPriority>
 8005580:	4602      	mov	r2, r0
 8005582:	f107 030c 	add.w	r3, r7, #12
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	9200      	str	r2, [sp, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	4632      	mov	r2, r6
 800558e:	4629      	mov	r1, r5
 8005590:	4620      	mov	r0, r4
 8005592:	f000 fc9f 	bl	8005ed4 <xTaskCreate>
 8005596:	4603      	mov	r3, r0
 8005598:	2b01      	cmp	r3, #1
 800559a:	d001      	beq.n	80055a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055a0:	68fb      	ldr	r3, [r7, #12]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <osDelay+0x16>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	e000      	b.n	80055c2 <osDelay+0x18>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fdc0 	bl	8006148 <vTaskDelay>
  
  return osOK;
 80055c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b086      	sub	sp, #24
 80055d6:	af02      	add	r7, sp, #8
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00f      	beq.n	8005604 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d10a      	bne.n	8005600 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2203      	movs	r2, #3
 80055f0:	9200      	str	r2, [sp, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	2100      	movs	r1, #0
 80055f6:	2001      	movs	r0, #1
 80055f8:	f000 f93e 	bl	8005878 <xQueueGenericCreateStatic>
 80055fc:	4603      	mov	r3, r0
 80055fe:	e016      	b.n	800562e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005600:	2300      	movs	r3, #0
 8005602:	e014      	b.n	800562e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d110      	bne.n	800562c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800560a:	2203      	movs	r2, #3
 800560c:	2100      	movs	r1, #0
 800560e:	2001      	movs	r0, #1
 8005610:	f000 f9b9 	bl	8005986 <xQueueGenericCreate>
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <osSemaphoreCreate+0x56>
 800561c:	2300      	movs	r3, #0
 800561e:	2200      	movs	r2, #0
 8005620:	2100      	movs	r1, #0
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fa12 	bl	8005a4c <xQueueGenericSend>
      return sema;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	e000      	b.n	800562e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800562c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f103 0208 	add.w	r2, r3, #8
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f04f 32ff 	mov.w	r2, #4294967295
 800564e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f103 0208 	add.w	r2, r3, #8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f103 0208 	add.w	r2, r3, #8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	601a      	str	r2, [r3, #0]
}
 80056cc:	bf00      	nop
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d103      	bne.n	80056f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	e00c      	b.n	8005712 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3308      	adds	r3, #8
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e002      	b.n	8005706 <vListInsert+0x2e>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	d2f6      	bcs.n	8005700 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6892      	ldr	r2, [r2, #8]
 8005760:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6852      	ldr	r2, [r2, #4]
 800576a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	429a      	cmp	r2, r3
 8005774:	d103      	bne.n	800577e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	1e5a      	subs	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10d      	bne.n	80057d0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b8:	b672      	cpsid	i
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	b662      	cpsie	i
 80057c8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
 80057ce:	e7fd      	b.n	80057cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80057d0:	f001 fb2c 	bl	8006e2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057dc:	68f9      	ldr	r1, [r7, #12]
 80057de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	441a      	add	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005800:	3b01      	subs	r3, #1
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	441a      	add	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	22ff      	movs	r2, #255	@ 0xff
 8005814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	22ff      	movs	r2, #255	@ 0xff
 800581c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d114      	bne.n	8005850 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d01a      	beq.n	8005864 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3310      	adds	r3, #16
 8005832:	4618      	mov	r0, r3
 8005834:	f000 ff16 	bl	8006664 <xTaskRemoveFromEventList>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d012      	beq.n	8005864 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800583e:	4b0d      	ldr	r3, [pc, #52]	@ (8005874 <xQueueGenericReset+0xd4>)
 8005840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	e009      	b.n	8005864 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3310      	adds	r3, #16
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff feee 	bl	8005636 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3324      	adds	r3, #36	@ 0x24
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff fee9 	bl	8005636 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005864:	f001 fb18 	bl	8006e98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005868:	2301      	movs	r3, #1
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08e      	sub	sp, #56	@ 0x38
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10d      	bne.n	80058a8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005890:	b672      	cpsid	i
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	b662      	cpsie	i
 80058a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10d      	bne.n	80058ca <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b2:	b672      	cpsid	i
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	b662      	cpsie	i
 80058c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	e7fd      	b.n	80058c6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <xQueueGenericCreateStatic+0x5e>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <xQueueGenericCreateStatic+0x62>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xQueueGenericCreateStatic+0x64>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10d      	bne.n	80058fc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e4:	b672      	cpsid	i
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	b662      	cpsie	i
 80058f4:	623b      	str	r3, [r7, #32]
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <xQueueGenericCreateStatic+0x90>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <xQueueGenericCreateStatic+0x94>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <xQueueGenericCreateStatic+0x96>
 800590c:	2300      	movs	r3, #0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10d      	bne.n	800592e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005916:	b672      	cpsid	i
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	b662      	cpsie	i
 8005926:	61fb      	str	r3, [r7, #28]
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	e7fd      	b.n	800592a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800592e:	2348      	movs	r3, #72	@ 0x48
 8005930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b48      	cmp	r3, #72	@ 0x48
 8005936:	d00d      	beq.n	8005954 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	b672      	cpsid	i
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	b662      	cpsie	i
 800594c:	61bb      	str	r3, [r7, #24]
}
 800594e:	bf00      	nop
 8005950:	bf00      	nop
 8005952:	e7fd      	b.n	8005950 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005954:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800595a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005968:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800596c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f848 	bl	8005a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800597e:	4618      	mov	r0, r3
 8005980:	3730      	adds	r7, #48	@ 0x30
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005986:	b580      	push	{r7, lr}
 8005988:	b08a      	sub	sp, #40	@ 0x28
 800598a:	af02      	add	r7, sp, #8
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	4613      	mov	r3, r2
 8005992:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10d      	bne.n	80059b6 <xQueueGenericCreate+0x30>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599e:	b672      	cpsid	i
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	b662      	cpsie	i
 80059ae:	613b      	str	r3, [r7, #16]
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	e7fd      	b.n	80059b2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	e004      	b.n	80059cc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	3348      	adds	r3, #72	@ 0x48
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 fb13 	bl	8006ffc <pvPortMalloc>
 80059d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d011      	beq.n	8005a02 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	3348      	adds	r3, #72	@ 0x48
 80059e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059f0:	79fa      	ldrb	r2, [r7, #7]
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4613      	mov	r3, r2
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f805 	bl	8005a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a02:	69bb      	ldr	r3, [r7, #24]
	}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3720      	adds	r7, #32
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d103      	bne.n	8005a28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	69b8      	ldr	r0, [r7, #24]
 8005a3e:	f7ff feaf 	bl	80057a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a42:	bf00      	nop
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08e      	sub	sp, #56	@ 0x38
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10d      	bne.n	8005a84 <xQueueGenericSend+0x38>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6c:	b672      	cpsid	i
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	b662      	cpsie	i
 8005a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <xQueueGenericSend+0x46>
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <xQueueGenericSend+0x4a>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <xQueueGenericSend+0x4c>
 8005a96:	2300      	movs	r3, #0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10d      	bne.n	8005ab8 <xQueueGenericSend+0x6c>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa0:	b672      	cpsid	i
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	b662      	cpsie	i
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	e7fd      	b.n	8005ab4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d103      	bne.n	8005ac6 <xQueueGenericSend+0x7a>
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <xQueueGenericSend+0x7e>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <xQueueGenericSend+0x80>
 8005aca:	2300      	movs	r3, #0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10d      	bne.n	8005aec <xQueueGenericSend+0xa0>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	b672      	cpsid	i
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	b662      	cpsie	i
 8005ae4:	623b      	str	r3, [r7, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	e7fd      	b.n	8005ae8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aec:	f000 ff82 	bl	80069f4 <xTaskGetSchedulerState>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d102      	bne.n	8005afc <xQueueGenericSend+0xb0>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <xQueueGenericSend+0xb4>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <xQueueGenericSend+0xb6>
 8005b00:	2300      	movs	r3, #0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10d      	bne.n	8005b22 <xQueueGenericSend+0xd6>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0a:	b672      	cpsid	i
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	b662      	cpsie	i
 8005b1a:	61fb      	str	r3, [r7, #28]
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	e7fd      	b.n	8005b1e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b22:	f001 f983 	bl	8006e2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d302      	bcc.n	8005b38 <xQueueGenericSend+0xec>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d129      	bne.n	8005b8c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b3e:	f000 f88f 	bl	8005c60 <prvCopyDataToQueue>
 8005b42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d010      	beq.n	8005b6e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	3324      	adds	r3, #36	@ 0x24
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fd87 	bl	8006664 <xTaskRemoveFromEventList>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d013      	beq.n	8005b84 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c5c <xQueueGenericSend+0x210>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	e00a      	b.n	8005b84 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b74:	4b39      	ldr	r3, [pc, #228]	@ (8005c5c <xQueueGenericSend+0x210>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b84:	f001 f988 	bl	8006e98 <vPortExitCritical>
				return pdPASS;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e063      	b.n	8005c54 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b92:	f001 f981 	bl	8006e98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e05c      	b.n	8005c54 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d106      	bne.n	8005bae <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ba0:	f107 0314 	add.w	r3, r7, #20
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fdc3 	bl	8006730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bae:	f001 f973 	bl	8006e98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bb2:	f000 fb67 	bl	8006284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bb6:	f001 f939 	bl	8006e2c <vPortEnterCritical>
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bc0:	b25b      	sxtb	r3, r3
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d103      	bne.n	8005bd0 <xQueueGenericSend+0x184>
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bd6:	b25b      	sxtb	r3, r3
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d103      	bne.n	8005be6 <xQueueGenericSend+0x19a>
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005be6:	f001 f957 	bl	8006e98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bea:	1d3a      	adds	r2, r7, #4
 8005bec:	f107 0314 	add.w	r3, r7, #20
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fdb2 	bl	800675c <xTaskCheckForTimeOut>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d124      	bne.n	8005c48 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c00:	f000 f8ea 	bl	8005dd8 <prvIsQueueFull>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d018      	beq.n	8005c3c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0c:	3310      	adds	r3, #16
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	4611      	mov	r1, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fcfe 	bl	8006614 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c1a:	f000 f88b 	bl	8005d34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c1e:	f000 fb3f 	bl	80062a0 <xTaskResumeAll>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f47f af7c 	bne.w	8005b22 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <xQueueGenericSend+0x210>)
 8005c2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	e772      	b.n	8005b22 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c3e:	f000 f879 	bl	8005d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c42:	f000 fb2d 	bl	80062a0 <xTaskResumeAll>
 8005c46:	e76c      	b.n	8005b22 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c4a:	f000 f873 	bl	8005d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c4e:	f000 fb27 	bl	80062a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3738      	adds	r7, #56	@ 0x38
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10d      	bne.n	8005c9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d14d      	bne.n	8005d22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fed0 	bl	8006a30 <xTaskPriorityDisinherit>
 8005c90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	e043      	b.n	8005d22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d119      	bne.n	8005cd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6858      	ldr	r0, [r3, #4]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	f001 fbbc 	bl	8007428 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	441a      	add	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d32b      	bcc.n	8005d22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	e026      	b.n	8005d22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68d8      	ldr	r0, [r3, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	f001 fba2 	bl	8007428 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cec:	425b      	negs	r3, r3
 8005cee:	441a      	add	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d207      	bcs.n	8005d10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	425b      	negs	r3, r3
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d105      	bne.n	8005d22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d2a:	697b      	ldr	r3, [r7, #20]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d3c:	f001 f876 	bl	8006e2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d48:	e011      	b.n	8005d6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d012      	beq.n	8005d78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3324      	adds	r3, #36	@ 0x24
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fc84 	bl	8006664 <xTaskRemoveFromEventList>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d62:	f000 fd63 	bl	800682c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	dce9      	bgt.n	8005d4a <prvUnlockQueue+0x16>
 8005d76:	e000      	b.n	8005d7a <prvUnlockQueue+0x46>
					break;
 8005d78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	22ff      	movs	r2, #255	@ 0xff
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d82:	f001 f889 	bl	8006e98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d86:	f001 f851 	bl	8006e2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d92:	e011      	b.n	8005db8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d012      	beq.n	8005dc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3310      	adds	r3, #16
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fc5f 	bl	8006664 <xTaskRemoveFromEventList>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dac:	f000 fd3e 	bl	800682c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005db0:	7bbb      	ldrb	r3, [r7, #14]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dce9      	bgt.n	8005d94 <prvUnlockQueue+0x60>
 8005dc0:	e000      	b.n	8005dc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	22ff      	movs	r2, #255	@ 0xff
 8005dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005dcc:	f001 f864 	bl	8006e98 <vPortExitCritical>
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005de0:	f001 f824 	bl	8006e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d102      	bne.n	8005df6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	e001      	b.n	8005dfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dfa:	f001 f84d 	bl	8006e98 <vPortExitCritical>

	return xReturn;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08e      	sub	sp, #56	@ 0x38
 8005e0c:	af04      	add	r7, sp, #16
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10d      	bne.n	8005e38 <xTaskCreateStatic+0x30>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e20:	b672      	cpsid	i
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	b662      	cpsie	i
 8005e30:	623b      	str	r3, [r7, #32]
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	e7fd      	b.n	8005e34 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10d      	bne.n	8005e5a <xTaskCreateStatic+0x52>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	b672      	cpsid	i
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	b662      	cpsie	i
 8005e52:	61fb      	str	r3, [r7, #28]
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
 8005e58:	e7fd      	b.n	8005e56 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e5a:	2354      	movs	r3, #84	@ 0x54
 8005e5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b54      	cmp	r3, #84	@ 0x54
 8005e62:	d00d      	beq.n	8005e80 <xTaskCreateStatic+0x78>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e68:	b672      	cpsid	i
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	b662      	cpsie	i
 8005e78:	61bb      	str	r3, [r7, #24]
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	e7fd      	b.n	8005e7c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01e      	beq.n	8005ec6 <xTaskCreateStatic+0xbe>
 8005e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01b      	beq.n	8005ec6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e90:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e96:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	9303      	str	r3, [sp, #12]
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	9302      	str	r3, [sp, #8]
 8005ea8:	f107 0314 	add.w	r3, r7, #20
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f850 	bl	8005f5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ebe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ec0:	f000 f8d8 	bl	8006074 <prvAddNewTaskToReadyList>
 8005ec4:	e001      	b.n	8005eca <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eca:	697b      	ldr	r3, [r7, #20]
	}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3728      	adds	r7, #40	@ 0x28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08c      	sub	sp, #48	@ 0x30
 8005ed8:	af04      	add	r7, sp, #16
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f001 f887 	bl	8006ffc <pvPortMalloc>
 8005eee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00e      	beq.n	8005f14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ef6:	2054      	movs	r0, #84	@ 0x54
 8005ef8:	f001 f880 	bl	8006ffc <pvPortMalloc>
 8005efc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f0a:	e005      	b.n	8005f18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f0c:	6978      	ldr	r0, [r7, #20]
 8005f0e:	f001 f943 	bl	8007198 <vPortFree>
 8005f12:	e001      	b.n	8005f18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d017      	beq.n	8005f4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f26:	88fa      	ldrh	r2, [r7, #6]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9303      	str	r3, [sp, #12]
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	9302      	str	r3, [sp, #8]
 8005f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f80e 	bl	8005f5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f42:	69f8      	ldr	r0, [r7, #28]
 8005f44:	f000 f896 	bl	8006074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	e002      	b.n	8005f54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f54:	69bb      	ldr	r3, [r7, #24]
	}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b088      	sub	sp, #32
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
 8005f6a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005f76:	440b      	add	r3, r1
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	f023 0307 	bic.w	r3, r3, #7
 8005f84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00d      	beq.n	8005fac <prvInitialiseNewTask+0x4e>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	b672      	cpsid	i
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	b662      	cpsie	i
 8005fa4:	617b      	str	r3, [r7, #20]
}
 8005fa6:	bf00      	nop
 8005fa8:	bf00      	nop
 8005faa:	e7fd      	b.n	8005fa8 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d01f      	beq.n	8005ff2 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61fb      	str	r3, [r7, #28]
 8005fb6:	e012      	b.n	8005fde <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	7819      	ldrb	r1, [r3, #0]
 8005fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3334      	adds	r3, #52	@ 0x34
 8005fc8:	460a      	mov	r2, r1
 8005fca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d006      	beq.n	8005fe6 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	61fb      	str	r3, [r7, #28]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	2b0f      	cmp	r3, #15
 8005fe2:	d9e9      	bls.n	8005fb8 <prvInitialiseNewTask+0x5a>
 8005fe4:	e000      	b.n	8005fe8 <prvInitialiseNewTask+0x8a>
			{
				break;
 8005fe6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ff0:	e003      	b.n	8005ffa <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffc:	2b06      	cmp	r3, #6
 8005ffe:	d901      	bls.n	8006004 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006000:	2306      	movs	r3, #6
 8006002:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006008:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800600e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006012:	2200      	movs	r2, #0
 8006014:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	3304      	adds	r3, #4
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fb2b 	bl	8005676 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	3318      	adds	r3, #24
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fb26 	bl	8005676 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800602e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	f1c3 0207 	rsb	r2, r3, #7
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	2200      	movs	r2, #0
 8006044:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	68f9      	ldr	r1, [r7, #12]
 8006052:	69b8      	ldr	r0, [r7, #24]
 8006054:	f000 fdde 	bl	8006c14 <pxPortInitialiseStack>
 8006058:	4602      	mov	r2, r0
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800605e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800606a:	bf00      	nop
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800607c:	f000 fed6 	bl	8006e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006080:	4b2a      	ldr	r3, [pc, #168]	@ (800612c <prvAddNewTaskToReadyList+0xb8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	4a29      	ldr	r2, [pc, #164]	@ (800612c <prvAddNewTaskToReadyList+0xb8>)
 8006088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800608a:	4b29      	ldr	r3, [pc, #164]	@ (8006130 <prvAddNewTaskToReadyList+0xbc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006092:	4a27      	ldr	r2, [pc, #156]	@ (8006130 <prvAddNewTaskToReadyList+0xbc>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006098:	4b24      	ldr	r3, [pc, #144]	@ (800612c <prvAddNewTaskToReadyList+0xb8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d110      	bne.n	80060c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060a0:	f000 fbe8 	bl	8006874 <prvInitialiseTaskLists>
 80060a4:	e00d      	b.n	80060c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060a6:	4b23      	ldr	r3, [pc, #140]	@ (8006134 <prvAddNewTaskToReadyList+0xc0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d109      	bne.n	80060c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ae:	4b20      	ldr	r3, [pc, #128]	@ (8006130 <prvAddNewTaskToReadyList+0xbc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d802      	bhi.n	80060c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006130 <prvAddNewTaskToReadyList+0xbc>)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006138 <prvAddNewTaskToReadyList+0xc4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3301      	adds	r3, #1
 80060c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006138 <prvAddNewTaskToReadyList+0xc4>)
 80060ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	2201      	movs	r2, #1
 80060d2:	409a      	lsls	r2, r3
 80060d4:	4b19      	ldr	r3, [pc, #100]	@ (800613c <prvAddNewTaskToReadyList+0xc8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4313      	orrs	r3, r2
 80060da:	4a18      	ldr	r2, [pc, #96]	@ (800613c <prvAddNewTaskToReadyList+0xc8>)
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4a15      	ldr	r2, [pc, #84]	@ (8006140 <prvAddNewTaskToReadyList+0xcc>)
 80060ec:	441a      	add	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3304      	adds	r3, #4
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f7ff facb 	bl	8005690 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060fa:	f000 fecd 	bl	8006e98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <prvAddNewTaskToReadyList+0xc0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00e      	beq.n	8006124 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006106:	4b0a      	ldr	r3, [pc, #40]	@ (8006130 <prvAddNewTaskToReadyList+0xbc>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006110:	429a      	cmp	r2, r3
 8006112:	d207      	bcs.n	8006124 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006114:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <prvAddNewTaskToReadyList+0xd0>)
 8006116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000e2c 	.word	0x20000e2c
 8006130:	20000d2c 	.word	0x20000d2c
 8006134:	20000e38 	.word	0x20000e38
 8006138:	20000e48 	.word	0x20000e48
 800613c:	20000e34 	.word	0x20000e34
 8006140:	20000d30 	.word	0x20000d30
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01a      	beq.n	8006190 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800615a:	4b15      	ldr	r3, [pc, #84]	@ (80061b0 <vTaskDelay+0x68>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00d      	beq.n	800617e <vTaskDelay+0x36>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	b672      	cpsid	i
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	b662      	cpsie	i
 8006176:	60bb      	str	r3, [r7, #8]
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800617e:	f000 f881 	bl	8006284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006182:	2100      	movs	r1, #0
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fcdf 	bl	8006b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800618a:	f000 f889 	bl	80062a0 <xTaskResumeAll>
 800618e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d107      	bne.n	80061a6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006196:	4b07      	ldr	r3, [pc, #28]	@ (80061b4 <vTaskDelay+0x6c>)
 8006198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000e54 	.word	0x20000e54
 80061b4:	e000ed04 	.word	0xe000ed04

080061b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08a      	sub	sp, #40	@ 0x28
 80061bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061be:	2300      	movs	r3, #0
 80061c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061c6:	463a      	mov	r2, r7
 80061c8:	1d39      	adds	r1, r7, #4
 80061ca:	f107 0308 	add.w	r3, r7, #8
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fa f9b4 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	9202      	str	r2, [sp, #8]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	2300      	movs	r3, #0
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	2300      	movs	r3, #0
 80061e4:	460a      	mov	r2, r1
 80061e6:	4921      	ldr	r1, [pc, #132]	@ (800626c <vTaskStartScheduler+0xb4>)
 80061e8:	4821      	ldr	r0, [pc, #132]	@ (8006270 <vTaskStartScheduler+0xb8>)
 80061ea:	f7ff fe0d 	bl	8005e08 <xTaskCreateStatic>
 80061ee:	4603      	mov	r3, r0
 80061f0:	4a20      	ldr	r2, [pc, #128]	@ (8006274 <vTaskStartScheduler+0xbc>)
 80061f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061f4:	4b1f      	ldr	r3, [pc, #124]	@ (8006274 <vTaskStartScheduler+0xbc>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061fc:	2301      	movs	r3, #1
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	e001      	b.n	8006206 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d118      	bne.n	800623e <vTaskStartScheduler+0x86>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006210:	b672      	cpsid	i
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	b662      	cpsie	i
 8006220:	613b      	str	r3, [r7, #16]
}
 8006222:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006224:	4b14      	ldr	r3, [pc, #80]	@ (8006278 <vTaskStartScheduler+0xc0>)
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
 800622a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800622c:	4b13      	ldr	r3, [pc, #76]	@ (800627c <vTaskStartScheduler+0xc4>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006232:	4b13      	ldr	r3, [pc, #76]	@ (8006280 <vTaskStartScheduler+0xc8>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006238:	f000 fd7a 	bl	8006d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800623c:	e011      	b.n	8006262 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d10d      	bne.n	8006262 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	b672      	cpsid	i
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	b662      	cpsie	i
 800625a:	60fb      	str	r3, [r7, #12]
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	e7fd      	b.n	800625e <vTaskStartScheduler+0xa6>
}
 8006262:	bf00      	nop
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	0800747c 	.word	0x0800747c
 8006270:	08006845 	.word	0x08006845
 8006274:	20000e50 	.word	0x20000e50
 8006278:	20000e4c 	.word	0x20000e4c
 800627c:	20000e38 	.word	0x20000e38
 8006280:	20000e30 	.word	0x20000e30

08006284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006288:	4b04      	ldr	r3, [pc, #16]	@ (800629c <vTaskSuspendAll+0x18>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3301      	adds	r3, #1
 800628e:	4a03      	ldr	r2, [pc, #12]	@ (800629c <vTaskSuspendAll+0x18>)
 8006290:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006292:	bf00      	nop
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	20000e54 	.word	0x20000e54

080062a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062ae:	4b43      	ldr	r3, [pc, #268]	@ (80063bc <xTaskResumeAll+0x11c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10d      	bne.n	80062d2 <xTaskResumeAll+0x32>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ba:	b672      	cpsid	i
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	b662      	cpsie	i
 80062ca:	603b      	str	r3, [r7, #0]
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	e7fd      	b.n	80062ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062d2:	f000 fdab 	bl	8006e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062d6:	4b39      	ldr	r3, [pc, #228]	@ (80063bc <xTaskResumeAll+0x11c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3b01      	subs	r3, #1
 80062dc:	4a37      	ldr	r2, [pc, #220]	@ (80063bc <xTaskResumeAll+0x11c>)
 80062de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e0:	4b36      	ldr	r3, [pc, #216]	@ (80063bc <xTaskResumeAll+0x11c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d161      	bne.n	80063ac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062e8:	4b35      	ldr	r3, [pc, #212]	@ (80063c0 <xTaskResumeAll+0x120>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d05d      	beq.n	80063ac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062f0:	e02e      	b.n	8006350 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f2:	4b34      	ldr	r3, [pc, #208]	@ (80063c4 <xTaskResumeAll+0x124>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3318      	adds	r3, #24
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff fa23 	bl	800574a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3304      	adds	r3, #4
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fa1e 	bl	800574a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	2201      	movs	r2, #1
 8006314:	409a      	lsls	r2, r3
 8006316:	4b2c      	ldr	r3, [pc, #176]	@ (80063c8 <xTaskResumeAll+0x128>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4313      	orrs	r3, r2
 800631c:	4a2a      	ldr	r2, [pc, #168]	@ (80063c8 <xTaskResumeAll+0x128>)
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4a27      	ldr	r2, [pc, #156]	@ (80063cc <xTaskResumeAll+0x12c>)
 800632e:	441a      	add	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3304      	adds	r3, #4
 8006334:	4619      	mov	r1, r3
 8006336:	4610      	mov	r0, r2
 8006338:	f7ff f9aa 	bl	8005690 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006340:	4b23      	ldr	r3, [pc, #140]	@ (80063d0 <xTaskResumeAll+0x130>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006346:	429a      	cmp	r2, r3
 8006348:	d302      	bcc.n	8006350 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800634a:	4b22      	ldr	r3, [pc, #136]	@ (80063d4 <xTaskResumeAll+0x134>)
 800634c:	2201      	movs	r2, #1
 800634e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006350:	4b1c      	ldr	r3, [pc, #112]	@ (80063c4 <xTaskResumeAll+0x124>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1cc      	bne.n	80062f2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800635e:	f000 fb29 	bl	80069b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006362:	4b1d      	ldr	r3, [pc, #116]	@ (80063d8 <xTaskResumeAll+0x138>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d010      	beq.n	8006390 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800636e:	f000 f837 	bl	80063e0 <xTaskIncrementTick>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006378:	4b16      	ldr	r3, [pc, #88]	@ (80063d4 <xTaskResumeAll+0x134>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3b01      	subs	r3, #1
 8006382:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f1      	bne.n	800636e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800638a:	4b13      	ldr	r3, [pc, #76]	@ (80063d8 <xTaskResumeAll+0x138>)
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006390:	4b10      	ldr	r3, [pc, #64]	@ (80063d4 <xTaskResumeAll+0x134>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d009      	beq.n	80063ac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006398:	2301      	movs	r3, #1
 800639a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800639c:	4b0f      	ldr	r3, [pc, #60]	@ (80063dc <xTaskResumeAll+0x13c>)
 800639e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063ac:	f000 fd74 	bl	8006e98 <vPortExitCritical>

	return xAlreadyYielded;
 80063b0:	68bb      	ldr	r3, [r7, #8]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000e54 	.word	0x20000e54
 80063c0:	20000e2c 	.word	0x20000e2c
 80063c4:	20000dec 	.word	0x20000dec
 80063c8:	20000e34 	.word	0x20000e34
 80063cc:	20000d30 	.word	0x20000d30
 80063d0:	20000d2c 	.word	0x20000d2c
 80063d4:	20000e40 	.word	0x20000e40
 80063d8:	20000e3c 	.word	0x20000e3c
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ea:	4b50      	ldr	r3, [pc, #320]	@ (800652c <xTaskIncrementTick+0x14c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 808b 	bne.w	800650a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063f4:	4b4e      	ldr	r3, [pc, #312]	@ (8006530 <xTaskIncrementTick+0x150>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063fc:	4a4c      	ldr	r2, [pc, #304]	@ (8006530 <xTaskIncrementTick+0x150>)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d123      	bne.n	8006450 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006408:	4b4a      	ldr	r3, [pc, #296]	@ (8006534 <xTaskIncrementTick+0x154>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <xTaskIncrementTick+0x4e>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006416:	b672      	cpsid	i
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	b662      	cpsie	i
 8006426:	603b      	str	r3, [r7, #0]
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	e7fd      	b.n	800642a <xTaskIncrementTick+0x4a>
 800642e:	4b41      	ldr	r3, [pc, #260]	@ (8006534 <xTaskIncrementTick+0x154>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	4b40      	ldr	r3, [pc, #256]	@ (8006538 <xTaskIncrementTick+0x158>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a3e      	ldr	r2, [pc, #248]	@ (8006534 <xTaskIncrementTick+0x154>)
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	4a3e      	ldr	r2, [pc, #248]	@ (8006538 <xTaskIncrementTick+0x158>)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	4b3e      	ldr	r3, [pc, #248]	@ (800653c <xTaskIncrementTick+0x15c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3301      	adds	r3, #1
 8006448:	4a3c      	ldr	r2, [pc, #240]	@ (800653c <xTaskIncrementTick+0x15c>)
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	f000 fab2 	bl	80069b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006450:	4b3b      	ldr	r3, [pc, #236]	@ (8006540 <xTaskIncrementTick+0x160>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	d348      	bcc.n	80064ec <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800645a:	4b36      	ldr	r3, [pc, #216]	@ (8006534 <xTaskIncrementTick+0x154>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d104      	bne.n	800646e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006464:	4b36      	ldr	r3, [pc, #216]	@ (8006540 <xTaskIncrementTick+0x160>)
 8006466:	f04f 32ff 	mov.w	r2, #4294967295
 800646a:	601a      	str	r2, [r3, #0]
					break;
 800646c:	e03e      	b.n	80064ec <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800646e:	4b31      	ldr	r3, [pc, #196]	@ (8006534 <xTaskIncrementTick+0x154>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	d203      	bcs.n	800648e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006486:	4a2e      	ldr	r2, [pc, #184]	@ (8006540 <xTaskIncrementTick+0x160>)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800648c:	e02e      	b.n	80064ec <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	3304      	adds	r3, #4
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff f959 	bl	800574a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	3318      	adds	r3, #24
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff f950 	bl	800574a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	2201      	movs	r2, #1
 80064b0:	409a      	lsls	r2, r3
 80064b2:	4b24      	ldr	r3, [pc, #144]	@ (8006544 <xTaskIncrementTick+0x164>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	4a22      	ldr	r2, [pc, #136]	@ (8006544 <xTaskIncrementTick+0x164>)
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006548 <xTaskIncrementTick+0x168>)
 80064ca:	441a      	add	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	4610      	mov	r0, r2
 80064d4:	f7ff f8dc 	bl	8005690 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064dc:	4b1b      	ldr	r3, [pc, #108]	@ (800654c <xTaskIncrementTick+0x16c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d3b9      	bcc.n	800645a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80064e6:	2301      	movs	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ea:	e7b6      	b.n	800645a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064ec:	4b17      	ldr	r3, [pc, #92]	@ (800654c <xTaskIncrementTick+0x16c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f2:	4915      	ldr	r1, [pc, #84]	@ (8006548 <xTaskIncrementTick+0x168>)
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d907      	bls.n	8006514 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e004      	b.n	8006514 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800650a:	4b11      	ldr	r3, [pc, #68]	@ (8006550 <xTaskIncrementTick+0x170>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3301      	adds	r3, #1
 8006510:	4a0f      	ldr	r2, [pc, #60]	@ (8006550 <xTaskIncrementTick+0x170>)
 8006512:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006514:	4b0f      	ldr	r3, [pc, #60]	@ (8006554 <xTaskIncrementTick+0x174>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006520:	697b      	ldr	r3, [r7, #20]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000e54 	.word	0x20000e54
 8006530:	20000e30 	.word	0x20000e30
 8006534:	20000de4 	.word	0x20000de4
 8006538:	20000de8 	.word	0x20000de8
 800653c:	20000e44 	.word	0x20000e44
 8006540:	20000e4c 	.word	0x20000e4c
 8006544:	20000e34 	.word	0x20000e34
 8006548:	20000d30 	.word	0x20000d30
 800654c:	20000d2c 	.word	0x20000d2c
 8006550:	20000e3c 	.word	0x20000e3c
 8006554:	20000e40 	.word	0x20000e40

08006558 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800655e:	4b28      	ldr	r3, [pc, #160]	@ (8006600 <vTaskSwitchContext+0xa8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006566:	4b27      	ldr	r3, [pc, #156]	@ (8006604 <vTaskSwitchContext+0xac>)
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800656c:	e042      	b.n	80065f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800656e:	4b25      	ldr	r3, [pc, #148]	@ (8006604 <vTaskSwitchContext+0xac>)
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006574:	4b24      	ldr	r3, [pc, #144]	@ (8006608 <vTaskSwitchContext+0xb0>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	fab3 f383 	clz	r3, r3
 8006580:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006582:	7afb      	ldrb	r3, [r7, #11]
 8006584:	f1c3 031f 	rsb	r3, r3, #31
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	4920      	ldr	r1, [pc, #128]	@ (800660c <vTaskSwitchContext+0xb4>)
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10d      	bne.n	80065ba <vTaskSwitchContext+0x62>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	b672      	cpsid	i
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	b662      	cpsie	i
 80065b2:	607b      	str	r3, [r7, #4]
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <vTaskSwitchContext+0x5e>
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4a11      	ldr	r2, [pc, #68]	@ (800660c <vTaskSwitchContext+0xb4>)
 80065c6:	4413      	add	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	605a      	str	r2, [r3, #4]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	3308      	adds	r3, #8
 80065dc:	429a      	cmp	r2, r3
 80065de:	d104      	bne.n	80065ea <vTaskSwitchContext+0x92>
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	4a07      	ldr	r2, [pc, #28]	@ (8006610 <vTaskSwitchContext+0xb8>)
 80065f2:	6013      	str	r3, [r2, #0]
}
 80065f4:	bf00      	nop
 80065f6:	371c      	adds	r7, #28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20000e54 	.word	0x20000e54
 8006604:	20000e40 	.word	0x20000e40
 8006608:	20000e34 	.word	0x20000e34
 800660c:	20000d30 	.word	0x20000d30
 8006610:	20000d2c 	.word	0x20000d2c

08006614 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10d      	bne.n	8006640 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006628:	b672      	cpsid	i
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	b662      	cpsie	i
 8006638:	60fb      	str	r3, [r7, #12]
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006640:	4b07      	ldr	r3, [pc, #28]	@ (8006660 <vTaskPlaceOnEventList+0x4c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3318      	adds	r3, #24
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff f845 	bl	80056d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800664e:	2101      	movs	r1, #1
 8006650:	6838      	ldr	r0, [r7, #0]
 8006652:	f000 fa79 	bl	8006b48 <prvAddCurrentTaskToDelayedList>
}
 8006656:	bf00      	nop
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000d2c 	.word	0x20000d2c

08006664 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10d      	bne.n	8006696 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667e:	b672      	cpsid	i
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	b662      	cpsie	i
 800668e:	60fb      	str	r3, [r7, #12]
}
 8006690:	bf00      	nop
 8006692:	bf00      	nop
 8006694:	e7fd      	b.n	8006692 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	3318      	adds	r3, #24
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff f855 	bl	800574a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006718 <xTaskRemoveFromEventList+0xb4>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d11c      	bne.n	80066e2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff f84c 	bl	800574a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	2201      	movs	r2, #1
 80066b8:	409a      	lsls	r2, r3
 80066ba:	4b18      	ldr	r3, [pc, #96]	@ (800671c <xTaskRemoveFromEventList+0xb8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4313      	orrs	r3, r2
 80066c0:	4a16      	ldr	r2, [pc, #88]	@ (800671c <xTaskRemoveFromEventList+0xb8>)
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4a13      	ldr	r2, [pc, #76]	@ (8006720 <xTaskRemoveFromEventList+0xbc>)
 80066d2:	441a      	add	r2, r3
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f7fe ffd8 	bl	8005690 <vListInsertEnd>
 80066e0:	e005      	b.n	80066ee <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	3318      	adds	r3, #24
 80066e6:	4619      	mov	r1, r3
 80066e8:	480e      	ldr	r0, [pc, #56]	@ (8006724 <xTaskRemoveFromEventList+0xc0>)
 80066ea:	f7fe ffd1 	bl	8005690 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <xTaskRemoveFromEventList+0xc4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d905      	bls.n	8006708 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066fc:	2301      	movs	r3, #1
 80066fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006700:	4b0a      	ldr	r3, [pc, #40]	@ (800672c <xTaskRemoveFromEventList+0xc8>)
 8006702:	2201      	movs	r2, #1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	e001      	b.n	800670c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800670c:	697b      	ldr	r3, [r7, #20]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000e54 	.word	0x20000e54
 800671c:	20000e34 	.word	0x20000e34
 8006720:	20000d30 	.word	0x20000d30
 8006724:	20000dec 	.word	0x20000dec
 8006728:	20000d2c 	.word	0x20000d2c
 800672c:	20000e40 	.word	0x20000e40

08006730 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006738:	4b06      	ldr	r3, [pc, #24]	@ (8006754 <vTaskInternalSetTimeOutState+0x24>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006740:	4b05      	ldr	r3, [pc, #20]	@ (8006758 <vTaskInternalSetTimeOutState+0x28>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	605a      	str	r2, [r3, #4]
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	20000e44 	.word	0x20000e44
 8006758:	20000e30 	.word	0x20000e30

0800675c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10d      	bne.n	8006788 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006770:	b672      	cpsid	i
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	b662      	cpsie	i
 8006780:	613b      	str	r3, [r7, #16]
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10d      	bne.n	80067aa <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	b672      	cpsid	i
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	b662      	cpsie	i
 80067a2:	60fb      	str	r3, [r7, #12]
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop
 80067a8:	e7fd      	b.n	80067a6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80067aa:	f000 fb3f 	bl	8006e2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006824 <xTaskCheckForTimeOut+0xc8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d102      	bne.n	80067ce <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	e023      	b.n	8006816 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4b15      	ldr	r3, [pc, #84]	@ (8006828 <xTaskCheckForTimeOut+0xcc>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d007      	beq.n	80067ea <xTaskCheckForTimeOut+0x8e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d302      	bcc.n	80067ea <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067e4:	2301      	movs	r3, #1
 80067e6:	61fb      	str	r3, [r7, #28]
 80067e8:	e015      	b.n	8006816 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d20b      	bcs.n	800680c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	1ad2      	subs	r2, r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff ff95 	bl	8006730 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006806:	2300      	movs	r3, #0
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	e004      	b.n	8006816 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006812:	2301      	movs	r3, #1
 8006814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006816:	f000 fb3f 	bl	8006e98 <vPortExitCritical>

	return xReturn;
 800681a:	69fb      	ldr	r3, [r7, #28]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	20000e30 	.word	0x20000e30
 8006828:	20000e44 	.word	0x20000e44

0800682c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006830:	4b03      	ldr	r3, [pc, #12]	@ (8006840 <vTaskMissedYield+0x14>)
 8006832:	2201      	movs	r2, #1
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bf00      	nop
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	20000e40 	.word	0x20000e40

08006844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800684c:	f000 f852 	bl	80068f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006850:	4b06      	ldr	r3, [pc, #24]	@ (800686c <prvIdleTask+0x28>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d9f9      	bls.n	800684c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006858:	4b05      	ldr	r3, [pc, #20]	@ (8006870 <prvIdleTask+0x2c>)
 800685a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006868:	e7f0      	b.n	800684c <prvIdleTask+0x8>
 800686a:	bf00      	nop
 800686c:	20000d30 	.word	0x20000d30
 8006870:	e000ed04 	.word	0xe000ed04

08006874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800687a:	2300      	movs	r3, #0
 800687c:	607b      	str	r3, [r7, #4]
 800687e:	e00c      	b.n	800689a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4a12      	ldr	r2, [pc, #72]	@ (80068d4 <prvInitialiseTaskLists+0x60>)
 800688c:	4413      	add	r3, r2
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fed1 	bl	8005636 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3301      	adds	r3, #1
 8006898:	607b      	str	r3, [r7, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b06      	cmp	r3, #6
 800689e:	d9ef      	bls.n	8006880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068a0:	480d      	ldr	r0, [pc, #52]	@ (80068d8 <prvInitialiseTaskLists+0x64>)
 80068a2:	f7fe fec8 	bl	8005636 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068a6:	480d      	ldr	r0, [pc, #52]	@ (80068dc <prvInitialiseTaskLists+0x68>)
 80068a8:	f7fe fec5 	bl	8005636 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068ac:	480c      	ldr	r0, [pc, #48]	@ (80068e0 <prvInitialiseTaskLists+0x6c>)
 80068ae:	f7fe fec2 	bl	8005636 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068b2:	480c      	ldr	r0, [pc, #48]	@ (80068e4 <prvInitialiseTaskLists+0x70>)
 80068b4:	f7fe febf 	bl	8005636 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068b8:	480b      	ldr	r0, [pc, #44]	@ (80068e8 <prvInitialiseTaskLists+0x74>)
 80068ba:	f7fe febc 	bl	8005636 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068be:	4b0b      	ldr	r3, [pc, #44]	@ (80068ec <prvInitialiseTaskLists+0x78>)
 80068c0:	4a05      	ldr	r2, [pc, #20]	@ (80068d8 <prvInitialiseTaskLists+0x64>)
 80068c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068c4:	4b0a      	ldr	r3, [pc, #40]	@ (80068f0 <prvInitialiseTaskLists+0x7c>)
 80068c6:	4a05      	ldr	r2, [pc, #20]	@ (80068dc <prvInitialiseTaskLists+0x68>)
 80068c8:	601a      	str	r2, [r3, #0]
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000d30 	.word	0x20000d30
 80068d8:	20000dbc 	.word	0x20000dbc
 80068dc:	20000dd0 	.word	0x20000dd0
 80068e0:	20000dec 	.word	0x20000dec
 80068e4:	20000e00 	.word	0x20000e00
 80068e8:	20000e18 	.word	0x20000e18
 80068ec:	20000de4 	.word	0x20000de4
 80068f0:	20000de8 	.word	0x20000de8

080068f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068fa:	e019      	b.n	8006930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068fc:	f000 fa96 	bl	8006e2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006900:	4b10      	ldr	r3, [pc, #64]	@ (8006944 <prvCheckTasksWaitingTermination+0x50>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3304      	adds	r3, #4
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe ff1c 	bl	800574a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006912:	4b0d      	ldr	r3, [pc, #52]	@ (8006948 <prvCheckTasksWaitingTermination+0x54>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3b01      	subs	r3, #1
 8006918:	4a0b      	ldr	r2, [pc, #44]	@ (8006948 <prvCheckTasksWaitingTermination+0x54>)
 800691a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800691c:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <prvCheckTasksWaitingTermination+0x58>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3b01      	subs	r3, #1
 8006922:	4a0a      	ldr	r2, [pc, #40]	@ (800694c <prvCheckTasksWaitingTermination+0x58>)
 8006924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006926:	f000 fab7 	bl	8006e98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f810 	bl	8006950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006930:	4b06      	ldr	r3, [pc, #24]	@ (800694c <prvCheckTasksWaitingTermination+0x58>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e1      	bne.n	80068fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000e00 	.word	0x20000e00
 8006948:	20000e2c 	.word	0x20000e2c
 800694c:	20000e14 	.word	0x20000e14

08006950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800695e:	2b00      	cmp	r3, #0
 8006960:	d108      	bne.n	8006974 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fc16 	bl	8007198 <vPortFree>
				vPortFree( pxTCB );
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fc13 	bl	8007198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006972:	e01b      	b.n	80069ac <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800697a:	2b01      	cmp	r3, #1
 800697c:	d103      	bne.n	8006986 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fc0a 	bl	8007198 <vPortFree>
	}
 8006984:	e012      	b.n	80069ac <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800698c:	2b02      	cmp	r3, #2
 800698e:	d00d      	beq.n	80069ac <prvDeleteTCB+0x5c>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	b672      	cpsid	i
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	b662      	cpsie	i
 80069a4:	60fb      	str	r3, [r7, #12]
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	e7fd      	b.n	80069a8 <prvDeleteTCB+0x58>
	}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ba:	4b0c      	ldr	r3, [pc, #48]	@ (80069ec <prvResetNextTaskUnblockTime+0x38>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069c4:	4b0a      	ldr	r3, [pc, #40]	@ (80069f0 <prvResetNextTaskUnblockTime+0x3c>)
 80069c6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069cc:	e008      	b.n	80069e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ce:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <prvResetNextTaskUnblockTime+0x38>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	4a04      	ldr	r2, [pc, #16]	@ (80069f0 <prvResetNextTaskUnblockTime+0x3c>)
 80069de:	6013      	str	r3, [r2, #0]
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000de4 	.word	0x20000de4
 80069f0:	20000e4c 	.word	0x20000e4c

080069f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006a28 <xTaskGetSchedulerState+0x34>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d102      	bne.n	8006a08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a02:	2301      	movs	r3, #1
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	e008      	b.n	8006a1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a08:	4b08      	ldr	r3, [pc, #32]	@ (8006a2c <xTaskGetSchedulerState+0x38>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a10:	2302      	movs	r3, #2
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	e001      	b.n	8006a1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a1a:	687b      	ldr	r3, [r7, #4]
	}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	20000e38 	.word	0x20000e38
 8006a2c:	20000e54 	.word	0x20000e54

08006a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d074      	beq.n	8006b30 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a46:	4b3d      	ldr	r3, [pc, #244]	@ (8006b3c <xTaskPriorityDisinherit+0x10c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d00d      	beq.n	8006a6c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	b672      	cpsid	i
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	b662      	cpsie	i
 8006a64:	60fb      	str	r3, [r7, #12]
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10d      	bne.n	8006a90 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a78:	b672      	cpsid	i
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	b662      	cpsie	i
 8006a88:	60bb      	str	r3, [r7, #8]
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	e7fd      	b.n	8006a8c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a94:	1e5a      	subs	r2, r3, #1
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d044      	beq.n	8006b30 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d140      	bne.n	8006b30 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fe49 	bl	800574a <uxListRemove>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d115      	bne.n	8006aea <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac2:	491f      	ldr	r1, [pc, #124]	@ (8006b40 <xTaskPriorityDisinherit+0x110>)
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <xTaskPriorityDisinherit+0xba>
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	2201      	movs	r2, #1
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	43da      	mvns	r2, r3
 8006ae0:	4b18      	ldr	r3, [pc, #96]	@ (8006b44 <xTaskPriorityDisinherit+0x114>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	4a17      	ldr	r2, [pc, #92]	@ (8006b44 <xTaskPriorityDisinherit+0x114>)
 8006ae8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	f1c3 0207 	rsb	r2, r3, #7
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b02:	2201      	movs	r2, #1
 8006b04:	409a      	lsls	r2, r3
 8006b06:	4b0f      	ldr	r3, [pc, #60]	@ (8006b44 <xTaskPriorityDisinherit+0x114>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8006b44 <xTaskPriorityDisinherit+0x114>)
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4a08      	ldr	r2, [pc, #32]	@ (8006b40 <xTaskPriorityDisinherit+0x110>)
 8006b1e:	441a      	add	r2, r3
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7fe fdb2 	bl	8005690 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b30:	697b      	ldr	r3, [r7, #20]
	}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000d2c 	.word	0x20000d2c
 8006b40:	20000d30 	.word	0x20000d30
 8006b44:	20000e34 	.word	0x20000e34

08006b48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b52:	4b29      	ldr	r3, [pc, #164]	@ (8006bf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b58:	4b28      	ldr	r3, [pc, #160]	@ (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fdf3 	bl	800574a <uxListRemove>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b6a:	4b24      	ldr	r3, [pc, #144]	@ (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b70:	2201      	movs	r2, #1
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	43da      	mvns	r2, r3
 8006b78:	4b21      	ldr	r3, [pc, #132]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	4a20      	ldr	r2, [pc, #128]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d10a      	bne.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x58>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b90:	4b1a      	ldr	r3, [pc, #104]	@ (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	481a      	ldr	r0, [pc, #104]	@ (8006c04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b9a:	f7fe fd79 	bl	8005690 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b9e:	e026      	b.n	8006bee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ba8:	4b14      	ldr	r3, [pc, #80]	@ (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d209      	bcs.n	8006bcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bb8:	4b13      	ldr	r3, [pc, #76]	@ (8006c08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f7fe fd87 	bl	80056d8 <vListInsert>
}
 8006bca:	e010      	b.n	8006bee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8006c0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f7fe fd7d 	bl	80056d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bde:	4b0c      	ldr	r3, [pc, #48]	@ (8006c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d202      	bcs.n	8006bee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006be8:	4a09      	ldr	r2, [pc, #36]	@ (8006c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6013      	str	r3, [r2, #0]
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000e30 	.word	0x20000e30
 8006bfc:	20000d2c 	.word	0x20000d2c
 8006c00:	20000e34 	.word	0x20000e34
 8006c04:	20000e18 	.word	0x20000e18
 8006c08:	20000de8 	.word	0x20000de8
 8006c0c:	20000de4 	.word	0x20000de4
 8006c10:	20000e4c 	.word	0x20000e4c

08006c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3b04      	subs	r3, #4
 8006c24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3b04      	subs	r3, #4
 8006c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f023 0201 	bic.w	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3b04      	subs	r3, #4
 8006c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c44:	4a0c      	ldr	r2, [pc, #48]	@ (8006c78 <pxPortInitialiseStack+0x64>)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3b14      	subs	r3, #20
 8006c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3b04      	subs	r3, #4
 8006c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f06f 0202 	mvn.w	r2, #2
 8006c62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3b20      	subs	r3, #32
 8006c68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	08006c7d 	.word	0x08006c7d

08006c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c86:	4b15      	ldr	r3, [pc, #84]	@ (8006cdc <prvTaskExitError+0x60>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d00d      	beq.n	8006cac <prvTaskExitError+0x30>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c94:	b672      	cpsid	i
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	b662      	cpsie	i
 8006ca4:	60fb      	str	r3, [r7, #12]
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <prvTaskExitError+0x2c>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb0:	b672      	cpsid	i
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	b662      	cpsie	i
 8006cc0:	60bb      	str	r3, [r7, #8]
}
 8006cc2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cc4:	bf00      	nop
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0fc      	beq.n	8006cc6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	2000000c 	.word	0x2000000c

08006ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ce0:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <pxCurrentTCBConst2>)
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	6808      	ldr	r0, [r1, #0]
 8006ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	f380 8809 	msr	PSP, r0
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	4770      	bx	lr
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst2>:
 8006d00:	20000d2c 	.word	0x20000d2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d08:	4808      	ldr	r0, [pc, #32]	@ (8006d2c <prvPortStartFirstTask+0x24>)
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	6800      	ldr	r0, [r0, #0]
 8006d0e:	f380 8808 	msr	MSP, r0
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8814 	msr	CONTROL, r0
 8006d1a:	b662      	cpsie	i
 8006d1c:	b661      	cpsie	f
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	df00      	svc	0
 8006d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed08 	.word	0xe000ed08

08006d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d36:	4b37      	ldr	r3, [pc, #220]	@ (8006e14 <xPortStartScheduler+0xe4>)
 8006d38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	22ff      	movs	r2, #255	@ 0xff
 8006d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006e18 <xPortStartScheduler+0xe8>)
 8006d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006d60:	2207      	movs	r2, #7
 8006d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d64:	e009      	b.n	8006d7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d66:	4b2d      	ldr	r3, [pc, #180]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d82:	2b80      	cmp	r3, #128	@ 0x80
 8006d84:	d0ef      	beq.n	8006d66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d86:	4b25      	ldr	r3, [pc, #148]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f1c3 0307 	rsb	r3, r3, #7
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d00d      	beq.n	8006dae <xPortStartScheduler+0x7e>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	b672      	cpsid	i
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	b662      	cpsie	i
 8006da6:	60bb      	str	r3, [r7, #8]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dae:	4b1b      	ldr	r3, [pc, #108]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	4a19      	ldr	r2, [pc, #100]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006db6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006db8:	4b18      	ldr	r3, [pc, #96]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006dc0:	4a16      	ldr	r2, [pc, #88]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006dc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006dcc:	4b14      	ldr	r3, [pc, #80]	@ (8006e20 <xPortStartScheduler+0xf0>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a13      	ldr	r2, [pc, #76]	@ (8006e20 <xPortStartScheduler+0xf0>)
 8006dd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006dd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006dd8:	4b11      	ldr	r3, [pc, #68]	@ (8006e20 <xPortStartScheduler+0xf0>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a10      	ldr	r2, [pc, #64]	@ (8006e20 <xPortStartScheduler+0xf0>)
 8006dde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006de2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006de4:	f000 f8dc 	bl	8006fa0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006de8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e24 <xPortStartScheduler+0xf4>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006dee:	f000 f8fb 	bl	8006fe8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006df2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e28 <xPortStartScheduler+0xf8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e28 <xPortStartScheduler+0xf8>)
 8006df8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006dfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dfe:	f7ff ff83 	bl	8006d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e02:	f7ff fba9 	bl	8006558 <vTaskSwitchContext>
	prvTaskExitError();
 8006e06:	f7ff ff39 	bl	8006c7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	e000e400 	.word	0xe000e400
 8006e18:	20000e58 	.word	0x20000e58
 8006e1c:	20000e5c 	.word	0x20000e5c
 8006e20:	e000ed20 	.word	0xe000ed20
 8006e24:	2000000c 	.word	0x2000000c
 8006e28:	e000ef34 	.word	0xe000ef34

08006e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e36:	b672      	cpsid	i
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	b662      	cpsie	i
 8006e46:	607b      	str	r3, [r7, #4]
}
 8006e48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e4a:	4b11      	ldr	r3, [pc, #68]	@ (8006e90 <vPortEnterCritical+0x64>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	4a0f      	ldr	r2, [pc, #60]	@ (8006e90 <vPortEnterCritical+0x64>)
 8006e52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e54:	4b0e      	ldr	r3, [pc, #56]	@ (8006e90 <vPortEnterCritical+0x64>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d112      	bne.n	8006e82 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <vPortEnterCritical+0x68>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00d      	beq.n	8006e82 <vPortEnterCritical+0x56>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	b672      	cpsid	i
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	b662      	cpsie	i
 8006e7a:	603b      	str	r3, [r7, #0]
}
 8006e7c:	bf00      	nop
 8006e7e:	bf00      	nop
 8006e80:	e7fd      	b.n	8006e7e <vPortEnterCritical+0x52>
	}
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	2000000c 	.word	0x2000000c
 8006e94:	e000ed04 	.word	0xe000ed04

08006e98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e9e:	4b13      	ldr	r3, [pc, #76]	@ (8006eec <vPortExitCritical+0x54>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10d      	bne.n	8006ec2 <vPortExitCritical+0x2a>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	b672      	cpsid	i
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	b662      	cpsie	i
 8006eba:	607b      	str	r3, [r7, #4]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8006eec <vPortExitCritical+0x54>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	4a08      	ldr	r2, [pc, #32]	@ (8006eec <vPortExitCritical+0x54>)
 8006eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ecc:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <vPortExitCritical+0x54>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d105      	bne.n	8006ee0 <vPortExitCritical+0x48>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ede:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	2000000c 	.word	0x2000000c

08006ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ef0:	f3ef 8009 	mrs	r0, PSP
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	4b15      	ldr	r3, [pc, #84]	@ (8006f50 <pxCurrentTCBConst>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	f01e 0f10 	tst.w	lr, #16
 8006f00:	bf08      	it	eq
 8006f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0a:	6010      	str	r0, [r2, #0]
 8006f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006f14:	b672      	cpsid	i
 8006f16:	f380 8811 	msr	BASEPRI, r0
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	b662      	cpsie	i
 8006f24:	f7ff fb18 	bl	8006558 <vTaskSwitchContext>
 8006f28:	f04f 0000 	mov.w	r0, #0
 8006f2c:	f380 8811 	msr	BASEPRI, r0
 8006f30:	bc09      	pop	{r0, r3}
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	6808      	ldr	r0, [r1, #0]
 8006f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3a:	f01e 0f10 	tst.w	lr, #16
 8006f3e:	bf08      	it	eq
 8006f40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f44:	f380 8809 	msr	PSP, r0
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop

08006f50 <pxCurrentTCBConst>:
 8006f50:	20000d2c 	.word	0x20000d2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop

08006f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	b672      	cpsid	i
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	b662      	cpsie	i
 8006f72:	607b      	str	r3, [r7, #4]
}
 8006f74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f76:	f7ff fa33 	bl	80063e0 <xTaskIncrementTick>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f80:	4b06      	ldr	r3, [pc, #24]	@ (8006f9c <xPortSysTickHandler+0x44>)
 8006f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	f383 8811 	msr	BASEPRI, r3
}
 8006f92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd4 <vPortSetupTimerInterrupt+0x34>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006faa:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd8 <vPortSetupTimerInterrupt+0x38>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006fdc <vPortSetupTimerInterrupt+0x3c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe0 <vPortSetupTimerInterrupt+0x40>)
 8006fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fba:	099b      	lsrs	r3, r3, #6
 8006fbc:	4a09      	ldr	r2, [pc, #36]	@ (8006fe4 <vPortSetupTimerInterrupt+0x44>)
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fc2:	4b04      	ldr	r3, [pc, #16]	@ (8006fd4 <vPortSetupTimerInterrupt+0x34>)
 8006fc4:	2207      	movs	r2, #7
 8006fc6:	601a      	str	r2, [r3, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	e000e010 	.word	0xe000e010
 8006fd8:	e000e018 	.word	0xe000e018
 8006fdc:	20000000 	.word	0x20000000
 8006fe0:	10624dd3 	.word	0x10624dd3
 8006fe4:	e000e014 	.word	0xe000e014

08006fe8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fe8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ff8 <vPortEnableVFP+0x10>
 8006fec:	6801      	ldr	r1, [r0, #0]
 8006fee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006ff2:	6001      	str	r1, [r0, #0]
 8006ff4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ff6:	bf00      	nop
 8006ff8:	e000ed88 	.word	0xe000ed88

08006ffc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	@ 0x28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007008:	f7ff f93c 	bl	8006284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800700c:	4b5d      	ldr	r3, [pc, #372]	@ (8007184 <pvPortMalloc+0x188>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007014:	f000 f920 	bl	8007258 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007018:	4b5b      	ldr	r3, [pc, #364]	@ (8007188 <pvPortMalloc+0x18c>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4013      	ands	r3, r2
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 8094 	bne.w	800714e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d020      	beq.n	800706e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800702c:	2208      	movs	r2, #8
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4413      	add	r3, r2
 8007032:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	2b00      	cmp	r3, #0
 800703c:	d017      	beq.n	800706e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f023 0307 	bic.w	r3, r3, #7
 8007044:	3308      	adds	r3, #8
 8007046:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00d      	beq.n	800706e <pvPortMalloc+0x72>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007056:	b672      	cpsid	i
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	b662      	cpsie	i
 8007066:	617b      	str	r3, [r7, #20]
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d06c      	beq.n	800714e <pvPortMalloc+0x152>
 8007074:	4b45      	ldr	r3, [pc, #276]	@ (800718c <pvPortMalloc+0x190>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	429a      	cmp	r2, r3
 800707c:	d867      	bhi.n	800714e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800707e:	4b44      	ldr	r3, [pc, #272]	@ (8007190 <pvPortMalloc+0x194>)
 8007080:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007082:	4b43      	ldr	r3, [pc, #268]	@ (8007190 <pvPortMalloc+0x194>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007088:	e004      	b.n	8007094 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	429a      	cmp	r2, r3
 800709c:	d903      	bls.n	80070a6 <pvPortMalloc+0xaa>
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f1      	bne.n	800708a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070a6:	4b37      	ldr	r3, [pc, #220]	@ (8007184 <pvPortMalloc+0x188>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d04e      	beq.n	800714e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2208      	movs	r2, #8
 80070b6:	4413      	add	r3, r2
 80070b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	1ad2      	subs	r2, r2, r3
 80070ca:	2308      	movs	r3, #8
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d922      	bls.n	8007118 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4413      	add	r3, r2
 80070d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00d      	beq.n	8007100 <pvPortMalloc+0x104>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	b672      	cpsid	i
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	b662      	cpsie	i
 80070f8:	613b      	str	r3, [r7, #16]
}
 80070fa:	bf00      	nop
 80070fc:	bf00      	nop
 80070fe:	e7fd      	b.n	80070fc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	1ad2      	subs	r2, r2, r3
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007112:	69b8      	ldr	r0, [r7, #24]
 8007114:	f000 f902 	bl	800731c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007118:	4b1c      	ldr	r3, [pc, #112]	@ (800718c <pvPortMalloc+0x190>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	4a1a      	ldr	r2, [pc, #104]	@ (800718c <pvPortMalloc+0x190>)
 8007124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007126:	4b19      	ldr	r3, [pc, #100]	@ (800718c <pvPortMalloc+0x190>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4b1a      	ldr	r3, [pc, #104]	@ (8007194 <pvPortMalloc+0x198>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	d203      	bcs.n	800713a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007132:	4b16      	ldr	r3, [pc, #88]	@ (800718c <pvPortMalloc+0x190>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a17      	ldr	r2, [pc, #92]	@ (8007194 <pvPortMalloc+0x198>)
 8007138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	4b12      	ldr	r3, [pc, #72]	@ (8007188 <pvPortMalloc+0x18c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	431a      	orrs	r2, r3
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800714e:	f7ff f8a7 	bl	80062a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00d      	beq.n	8007178 <pvPortMalloc+0x17c>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	b672      	cpsid	i
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	b662      	cpsie	i
 8007170:	60fb      	str	r3, [r7, #12]
}
 8007172:	bf00      	nop
 8007174:	bf00      	nop
 8007176:	e7fd      	b.n	8007174 <pvPortMalloc+0x178>
	return pvReturn;
 8007178:	69fb      	ldr	r3, [r7, #28]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	@ 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20004a68 	.word	0x20004a68
 8007188:	20004a74 	.word	0x20004a74
 800718c:	20004a6c 	.word	0x20004a6c
 8007190:	20004a60 	.word	0x20004a60
 8007194:	20004a70 	.word	0x20004a70

08007198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d04e      	beq.n	8007248 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071aa:	2308      	movs	r3, #8
 80071ac:	425b      	negs	r3, r3
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4413      	add	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	4b24      	ldr	r3, [pc, #144]	@ (8007250 <vPortFree+0xb8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4013      	ands	r3, r2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10d      	bne.n	80071e2 <vPortFree+0x4a>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ca:	b672      	cpsid	i
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	b662      	cpsie	i
 80071da:	60fb      	str	r3, [r7, #12]
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	e7fd      	b.n	80071de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00d      	beq.n	8007206 <vPortFree+0x6e>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ee:	b672      	cpsid	i
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	b662      	cpsie	i
 80071fe:	60bb      	str	r3, [r7, #8]
}
 8007200:	bf00      	nop
 8007202:	bf00      	nop
 8007204:	e7fd      	b.n	8007202 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	4b11      	ldr	r3, [pc, #68]	@ (8007250 <vPortFree+0xb8>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4013      	ands	r3, r2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d019      	beq.n	8007248 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d115      	bne.n	8007248 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	4b0b      	ldr	r3, [pc, #44]	@ (8007250 <vPortFree+0xb8>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	43db      	mvns	r3, r3
 8007226:	401a      	ands	r2, r3
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800722c:	f7ff f82a 	bl	8006284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	4b07      	ldr	r3, [pc, #28]	@ (8007254 <vPortFree+0xbc>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4413      	add	r3, r2
 800723a:	4a06      	ldr	r2, [pc, #24]	@ (8007254 <vPortFree+0xbc>)
 800723c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800723e:	6938      	ldr	r0, [r7, #16]
 8007240:	f000 f86c 	bl	800731c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007244:	f7ff f82c 	bl	80062a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007248:	bf00      	nop
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20004a74 	.word	0x20004a74
 8007254:	20004a6c 	.word	0x20004a6c

08007258 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800725e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007262:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007264:	4b27      	ldr	r3, [pc, #156]	@ (8007304 <prvHeapInit+0xac>)
 8007266:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00c      	beq.n	800728c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3307      	adds	r3, #7
 8007276:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0307 	bic.w	r3, r3, #7
 800727e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	4a1f      	ldr	r2, [pc, #124]	@ (8007304 <prvHeapInit+0xac>)
 8007288:	4413      	add	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007290:	4a1d      	ldr	r2, [pc, #116]	@ (8007308 <prvHeapInit+0xb0>)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007296:	4b1c      	ldr	r3, [pc, #112]	@ (8007308 <prvHeapInit+0xb0>)
 8007298:	2200      	movs	r2, #0
 800729a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	4413      	add	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072a4:	2208      	movs	r2, #8
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1a9b      	subs	r3, r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0307 	bic.w	r3, r3, #7
 80072b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4a15      	ldr	r2, [pc, #84]	@ (800730c <prvHeapInit+0xb4>)
 80072b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072ba:	4b14      	ldr	r3, [pc, #80]	@ (800730c <prvHeapInit+0xb4>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2200      	movs	r2, #0
 80072c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072c2:	4b12      	ldr	r3, [pc, #72]	@ (800730c <prvHeapInit+0xb4>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072d8:	4b0c      	ldr	r3, [pc, #48]	@ (800730c <prvHeapInit+0xb4>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4a0a      	ldr	r2, [pc, #40]	@ (8007310 <prvHeapInit+0xb8>)
 80072e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	4a09      	ldr	r2, [pc, #36]	@ (8007314 <prvHeapInit+0xbc>)
 80072ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072f0:	4b09      	ldr	r3, [pc, #36]	@ (8007318 <prvHeapInit+0xc0>)
 80072f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80072f6:	601a      	str	r2, [r3, #0]
}
 80072f8:	bf00      	nop
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	20000e60 	.word	0x20000e60
 8007308:	20004a60 	.word	0x20004a60
 800730c:	20004a68 	.word	0x20004a68
 8007310:	20004a70 	.word	0x20004a70
 8007314:	20004a6c 	.word	0x20004a6c
 8007318:	20004a74 	.word	0x20004a74

0800731c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007324:	4b28      	ldr	r3, [pc, #160]	@ (80073c8 <prvInsertBlockIntoFreeList+0xac>)
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e002      	b.n	8007330 <prvInsertBlockIntoFreeList+0x14>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	429a      	cmp	r2, r3
 8007338:	d8f7      	bhi.n	800732a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	4413      	add	r3, r2
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d108      	bne.n	800735e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	441a      	add	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	441a      	add	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d118      	bne.n	80073a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b15      	ldr	r3, [pc, #84]	@ (80073cc <prvInsertBlockIntoFreeList+0xb0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d00d      	beq.n	800739a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	441a      	add	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e008      	b.n	80073ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800739a:	4b0c      	ldr	r3, [pc, #48]	@ (80073cc <prvInsertBlockIntoFreeList+0xb0>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	e003      	b.n	80073ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d002      	beq.n	80073ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ba:	bf00      	nop
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	20004a60 	.word	0x20004a60
 80073cc:	20004a68 	.word	0x20004a68

080073d0 <memset>:
 80073d0:	4402      	add	r2, r0
 80073d2:	4603      	mov	r3, r0
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d100      	bne.n	80073da <memset+0xa>
 80073d8:	4770      	bx	lr
 80073da:	f803 1b01 	strb.w	r1, [r3], #1
 80073de:	e7f9      	b.n	80073d4 <memset+0x4>

080073e0 <__libc_init_array>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007418 <__libc_init_array+0x38>)
 80073e4:	4c0d      	ldr	r4, [pc, #52]	@ (800741c <__libc_init_array+0x3c>)
 80073e6:	1b64      	subs	r4, r4, r5
 80073e8:	10a4      	asrs	r4, r4, #2
 80073ea:	2600      	movs	r6, #0
 80073ec:	42a6      	cmp	r6, r4
 80073ee:	d109      	bne.n	8007404 <__libc_init_array+0x24>
 80073f0:	4d0b      	ldr	r5, [pc, #44]	@ (8007420 <__libc_init_array+0x40>)
 80073f2:	4c0c      	ldr	r4, [pc, #48]	@ (8007424 <__libc_init_array+0x44>)
 80073f4:	f000 f826 	bl	8007444 <_init>
 80073f8:	1b64      	subs	r4, r4, r5
 80073fa:	10a4      	asrs	r4, r4, #2
 80073fc:	2600      	movs	r6, #0
 80073fe:	42a6      	cmp	r6, r4
 8007400:	d105      	bne.n	800740e <__libc_init_array+0x2e>
 8007402:	bd70      	pop	{r4, r5, r6, pc}
 8007404:	f855 3b04 	ldr.w	r3, [r5], #4
 8007408:	4798      	blx	r3
 800740a:	3601      	adds	r6, #1
 800740c:	e7ee      	b.n	80073ec <__libc_init_array+0xc>
 800740e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007412:	4798      	blx	r3
 8007414:	3601      	adds	r6, #1
 8007416:	e7f2      	b.n	80073fe <__libc_init_array+0x1e>
 8007418:	080074ac 	.word	0x080074ac
 800741c:	080074ac 	.word	0x080074ac
 8007420:	080074ac 	.word	0x080074ac
 8007424:	080074b0 	.word	0x080074b0

08007428 <memcpy>:
 8007428:	440a      	add	r2, r1
 800742a:	4291      	cmp	r1, r2
 800742c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007430:	d100      	bne.n	8007434 <memcpy+0xc>
 8007432:	4770      	bx	lr
 8007434:	b510      	push	{r4, lr}
 8007436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800743e:	4291      	cmp	r1, r2
 8007440:	d1f9      	bne.n	8007436 <memcpy+0xe>
 8007442:	bd10      	pop	{r4, pc}

08007444 <_init>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	bf00      	nop
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr

08007450 <_fini>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	bf00      	nop
 8007454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007456:	bc08      	pop	{r3}
 8007458:	469e      	mov	lr, r3
 800745a:	4770      	bx	lr
